{
'postCmdArgument046/commandArg046': ({commandArg046})=>`  ${run(commandArg046,'commandArg046')},
`,
'postCmdArgument045/commandArg045': ({commandArg045})=>`  ${run(commandArg045,'commandArg045')},
`,
'postCmdArgument044/commandArg044': ({commandArg044})=>`  ${run(commandArg044,'commandArg044')},
`,
'postCmdArgument043/commandArg043': ({commandArg043})=>`  ${run(commandArg043,'commandArg043')},
`,
'postCmdArgument042/commandArg042': ({commandArg042})=>`  ${run(commandArg042,'commandArg042')},
`,
'postCmdArgument041/commandArg041': ({commandArg041})=>`  ${run(commandArg041,'commandArg041')},
`,
'postCmdArgument040/commandArg040': ({commandArg040})=>`  ${run(commandArg040,'commandArg040')},
`,
'postCmdArgument039/commandArg039': ({commandArg039})=>`  ${run(commandArg039,'commandArg039')},
`,
'postCmdArgument038/commandArg038': ({commandArg038})=>`  ${run(commandArg038,'commandArg038')},
`,
'postCmdArgument037/commandArg037': ({commandArg037})=>`  ${run(commandArg037,'commandArg037')},
`,
'postCmdArgument036/commandArg036': ({commandArg036})=>`  ${run(commandArg036,'commandArg036')},
`,
'postCmdArgument035/commandArg035': ({commandArg035})=>`  ${run(commandArg035,'commandArg035')},
`,
'postCmdArgument034/commandArg034': ({commandArg034})=>`  ${run(commandArg034,'commandArg034')},
`,
'postCmdArgument033/commandArg033': ({commandArg033})=>`  ${run(commandArg033,'commandArg033')},
`,
'postCmdArgument032/commandArg032': ({commandArg032})=>`  ${run(commandArg032,'commandArg032')},
`,
'postCmdArgument031/commandArg031': ({commandArg031})=>`  ${run(commandArg031,'commandArg031')},
`,
'postCmdArgument030/commandArg030': ({commandArg030})=>`  ${run(commandArg030,'commandArg030')},
`,
'postCmdArgument029/commandArg029': ({commandArg029})=>`  ${run(commandArg029,'commandArg029')},
`,
'postCmdArgument028/commandArg028': ({commandArg028})=>`  ${run(commandArg028,'commandArg028')},
`,
'postCmdArgument027/commandArg027': ({commandArg027})=>`  ${run(commandArg027,'commandArg027')},
`,
'postCmdArgument026/commandArg026': ({commandArg026})=>`  ${run(commandArg026,'commandArg026')},
`,
'postCmdArgument025/commandArg025': ({commandArg025})=>`  ${run(commandArg025,'commandArg025')},
`,
'postCmdArgument024/commandArg024': ({commandArg024})=>`  ${run(commandArg024,'commandArg024')},
`,
'postCmdArgument023/commandArg023': ({commandArg023})=>`  ${run(commandArg023,'commandArg023')},
`,
'postCmdArgument022/commandArg022': ({commandArg022})=>`  ${run(commandArg022,'commandArg022')},
`,
'postCmdArgument021/commandArg021': ({commandArg021})=>`  ${run(commandArg021,'commandArg021')},
`,
'postCmdArgument020/commandArg020': ({commandArg020})=>`  ${run(commandArg020,'commandArg020')},
`,
'postCmdArgument019/commandArg019': ({commandArg019})=>`  ${run(commandArg019,'commandArg019')},
`,
'postCmdArgument018/commandArg018': ({commandArg018})=>`  ${run(commandArg018,'commandArg018')},
`,
'postCmdArgument017/commandArg017': ({commandArg017})=>`  ${run(commandArg017,'commandArg017')},
`,
'postCmdArgument016/commandArg016': ({commandArg016})=>`  ${run(commandArg016,'commandArg016')},
`,
'postCmdArgument015/commandArg015': ({commandArg015})=>`  ${run(commandArg015,'commandArg015')},
`,
'postCmdArgument014/commandArg014': ({commandArg014})=>`  ${run(commandArg014,'commandArg014')},
`,
'postCmdArgument013/commandArg013': ({commandArg013})=>`  ${run(commandArg013,'commandArg013')},
`,
'postCmdArgument012/commandArg012': ({commandArg012})=>`  ${run(commandArg012,'commandArg012')},
`,
'postCmdArgument011/commandArg011': ({commandArg011})=>`  ${run(commandArg011,'commandArg011')},
`,
'postCmdArgument010/commandArg010': ({commandArg010})=>`  ${run(commandArg010,'commandArg010')},
`,
'postCmdArgument09/commandArg09': ({commandArg09})=>`  ${run(commandArg09,'commandArg09')},
`,
'postCmdArgument08/commandArg08': ({commandArg08})=>`  ${run(commandArg08,'commandArg08')},
`,
'postCmdArgument07/commandArg07': ({commandArg07})=>`  ${run(commandArg07,'commandArg07')},
`,
'postCmdArgument06/commandArg06': ({commandArg06})=>`  ${run(commandArg06,'commandArg06')},
`,
'postCmdArgument05/commandArg05': ({commandArg05})=>`  ${run(commandArg05,'commandArg05')},
`,
'postCmdArgument04/commandArg04': ({commandArg04})=>`  ${run(commandArg04,'commandArg04')},
`,
'postCmdArgument03/commandArg03': ({commandArg03})=>`  ${run(commandArg03,'commandArg03')},
`,
'postCmdArgument02/commandArg02': ({commandArg02})=>`  ${run(commandArg02,'commandArg02')},
`,
'postCmdArgument01/commandArg01': ({commandArg01})=>`  ${run(commandArg01,'commandArg01')},
`,
'fifth.tsxa4023e8966/postCmdArgument01,postCmdArgument02,postCmdArgument03,postCmdArgument04,postCmdArgument05,postCmdArgument06,postCmdArgument07,postCmdArgument08,postCmdArgument09,postCmdArgument010,postCmdArgument011,postCmdArgument012,postCmdArgument013,postCmdArgument014,postCmdArgument015,postCmdArgument016,postCmdArgument017,postCmdArgument018,postCmdArgument019,postCmdArgument020,postCmdArgument021,postCmdArgument022,postCmdArgument023,postCmdArgument024,postCmdArgument025,postCmdArgument026,postCmdArgument027,postCmdArgument028,postCmdArgument029,postCmdArgument030,postCmdArgument031,postCmdArgument032,postCmdArgument033,postCmdArgument034,postCmdArgument035,postCmdArgument036,postCmdArgument037,postCmdArgument038,postCmdArgument039,postCmdArgument040,postCmdArgument041,postCmdArgument042,postCmdArgument043,postCmdArgument044,postCmdArgument045,postCmdArgument046': ({postCmdArgument01, postCmdArgument02, postCmdArgument03, postCmdArgument04, postCmdArgument05, postCmdArgument06, postCmdArgument07, postCmdArgument08, postCmdArgument09, postCmdArgument010, postCmdArgument011, postCmdArgument012, postCmdArgument013, postCmdArgument014, postCmdArgument015, postCmdArgument016, postCmdArgument017, postCmdArgument018, postCmdArgument019, postCmdArgument020, postCmdArgument021, postCmdArgument022, postCmdArgument023, postCmdArgument024, postCmdArgument025, postCmdArgument026, postCmdArgument027, postCmdArgument028, postCmdArgument029, postCmdArgument030, postCmdArgument031, postCmdArgument032, postCmdArgument033, postCmdArgument034, postCmdArgument035, postCmdArgument036, postCmdArgument037, postCmdArgument038, postCmdArgument039, postCmdArgument040, postCmdArgument041, postCmdArgument042, postCmdArgument043, postCmdArgument044, postCmdArgument045, postCmdArgument046})=>`import { cloneDeep, difference, last, uniqueId } from "lodash";
import { useEffect, useState } from "react";
import {
${run(postCmdArgument01, 'postCmdArgument01')}${run(postCmdArgument02, 'postCmdArgument02')}${run(postCmdArgument03, 'postCmdArgument03')}${run(postCmdArgument04, 'postCmdArgument04')}${run(postCmdArgument05, 'postCmdArgument05')}${run(postCmdArgument06, 'postCmdArgument06')}} from "symmetric-parser";
import { Template } from "symmetric-parser/dist/src/templator/template-group";
import { formGeneratorFile } from "./hgcgUtil";
import { CONFIG_PATH } from "../components/App";
import { customAlphabet } from "nanoid";
import { WordDefinition } from "../components/TemplateTree";

export type WordStep = {
${run(postCmdArgument07, 'postCmdArgument07')}${run(postCmdArgument08, 'postCmdArgument08')}${run(postCmdArgument09, 'postCmdArgument09')}${run(postCmdArgument010, 'postCmdArgument010')}${run(postCmdArgument011, 'postCmdArgument011')}${run(postCmdArgument012, 'postCmdArgument012')}${run(postCmdArgument013, 'postCmdArgument013')}${run(postCmdArgument014, 'postCmdArgument014')}${run(postCmdArgument015, 'postCmdArgument015')}${run(postCmdArgument016, 'postCmdArgument016')}${run(postCmdArgument017, 'postCmdArgument017')}${run(postCmdArgument018, 'postCmdArgument018')}${run(postCmdArgument019, 'postCmdArgument019')}${run(postCmdArgument020, 'postCmdArgument020')}${run(postCmdArgument021, 'postCmdArgument021')}${run(postCmdArgument022, 'postCmdArgument022')}${run(postCmdArgument023, 'postCmdArgument023')}${run(postCmdArgument024, 'postCmdArgument024')}${run(postCmdArgument025, 'postCmdArgument025')}${run(postCmdArgument026, 'postCmdArgument026')}${run(postCmdArgument027, 'postCmdArgument027')}${run(postCmdArgument028, 'postCmdArgument028')}${run(postCmdArgument029, 'postCmdArgument029')}${run(postCmdArgument030, 'postCmdArgument030')}${run(postCmdArgument031, 'postCmdArgument031')}${run(postCmdArgument032, 'postCmdArgument032')}${run(postCmdArgument033, 'postCmdArgument033')}${run(postCmdArgument034, 'postCmdArgument034')}${run(postCmdArgument035, 'postCmdArgument035')}${run(postCmdArgument036, 'postCmdArgument036')}${run(postCmdArgument037, 'postCmdArgument037')}${run(postCmdArgument038, 'postCmdArgument038')}${run(postCmdArgument039, 'postCmdArgument039')}${run(postCmdArgument040, 'postCmdArgument040')}${run(postCmdArgument041, 'postCmdArgument041')}${run(postCmdArgument042, 'postCmdArgument042')}${run(postCmdArgument043, 'postCmdArgument043')}${run(postCmdArgument044, 'postCmdArgument044')}${run(postCmdArgument045, 'postCmdArgument045')}${run(postCmdArgument046, 'postCmdArgument046')}  };
}
`,
'commandArg01': ()=>`appendKeyToKey`,
'commandArg02': ()=>`dumbCombine`,
'commandArg03': ()=>`insertIntoTemplate`,
'commandArg04': ()=>`sortTemplateByDeps`,
'commandArg05': ()=>`tts`,
'commandArg06': ()=>`argsAndTemplateToFunction`,
'commandArg07': ()=>`name?: string;
  args?: any[];
  result: Template;
  files?: { generatorFilePath?: string; resultFilePath?: string };
};

export function useTemplate(
  definition: WordDefinition`,
'commandArg08': ()=>`templateModule: any`,
'commandArg09': ()=>`generatorModule: any`,
'commandArg010': ()=>`wordModule: any`,
'commandArg011': ()=>`postMessage: any`,
'commandArg012': ()=>`isMainTemplate: boolean
) {
  const alphabet =
    "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
  const nanoid = customAlphabet(alphabet, 4);

  const [msgId, setMsgId] = useState(nanoid());
  let [template, setTemplate] = useState<Template>(
    last(definition.wordSteps).result
  );

  const [wordSteps, setWordSteps] = useState<WordStep[]>(definition.wordSteps);
  function logStep(name, args, result, files = {}) {
    console.log("PREV STEPS", wordSteps);
    const wordStep = {
      name: name`,
'commandArg013': ()=>`    args: args`,
'commandArg014': ()=>`    result: cloneDeep(result)`,
'commandArg015': ()=>`    files`,
'commandArg016': ()=>`  };

    const newWordSteps = [...wordSteps, wordStep];
    setWordSteps(newWordSteps);
    const stringifiedSteps = newWordSteps.map((ws) => {
      return {
        name: ws.name`,
'commandArg017': ()=>`      args: ws.args`,
'commandArg018': ()=>`      result:
          typeof ws.result === "string" ? ws.result : tts(ws.result, false)`,
'commandArg019': ()=>`      files: ws.files`,
'commandArg020': ()=>`    };
    });
    console.log("STRINGIFIED STEPS", stringifiedSteps);
    const wordName = definition.name;

    postMessage({
      command: "save_word_steps"`,
'commandArg021': ()=>`    wordSteps: JSON.stringify(stringifiedSteps)`,
'commandArg022': ()=>`    wordName`,
'commandArg023': ()=>`    pathToConfig: CONFIG_PATH`,
'commandArg024': ()=>`    msgId`,
'commandArg025': ()=>`  });
  }

  function removeKey(key: string) {
    const newTemplate = cloneDeep(template);
    delete newTemplate[key];
    logStep("deleteKey", [key], newTemplate);
    setTemplate(newTemplate);
  }
  function addKey(key: string) {
    const templateHasNumerator = Object.keys(template).some((k) => {
      return k.split("/")[0] === key;
    });
    if (templateHasNumerator) return;
    let combineWith = { [key]: () => \`\` };
    let newTemplate = dumbCombine(template, combineWith);
    let result = sortTemplateByDeps(sortTemplateByDeps(newTemplate));
    logStep("dumbCombine", [template, combineWith], result);
    setTemplate(result);
  }

  function addKeyToNumerator(appendKey: string, toKey: string) {
    const fullToKey = Object.keys(template).find(
      (k) => k.split("/")[0] === toKey
    );
    if (fullToKey != null) {
      // check that the appendKey isn't already in there
      const denoms = fullToKey.split("/")[1]?.split(",");
      if (denoms?.includes(appendKey)) {
        return;
      }
    }
    let newTemplate = appendKeyToKey(template, appendKey, toKey);
    let result = sortTemplateByDeps(sortTemplateByDeps(newTemplate));
    logStep("appendKeyToKey", [template, appendKey, toKey], result);

    setTemplate(result);
  }

  function insertTemplateIntoTemplate(templateToInsert: Template) {
    console.log("inserting template into template", templateToInsert);
    let newTemplate = insertIntoTemplate(template, templateToInsert);
    let result = sortTemplateByDeps(sortTemplateByDeps(newTemplate));
    logStep("insertIntoTemplate", [template, templateToInsert], result);

    setTemplate(result);
  }
  function insertTemplateIntoTemplateAtKey(
    templateToInsert: Template`,
'commandArg026': ()=>`  toKey: string
  ) {
    console.log(
      "insertTemplateIntoTemplateAtKey"`,
'commandArg027': ()=>`    templateToInsert`,
'commandArg028': ()=>`    toKey`,
'commandArg029': ()=>`    template
    );
    const oldKeys = Object.keys(template);
    let newTemplate = insertIntoTemplate(template, templateToInsert);
    logStep("insertIntoTemplate", [template, templateToInsert], newTemplate);

    const newKeys = Object.keys(newTemplate);
    const newestKey = newKeys
      .filter((k) => !oldKeys.includes(k))[0]
      ?.split("/")[0];
    console.log("NEWEST KEY", newestKey);
    let appendedTemplate = appendKeyToKey(newTemplate, newestKey, toKey);
    const result = sortTemplateByDeps(sortTemplateByDeps(appendedTemplate));
    logStep("appendKeyToKey", [newTemplate, newestKey, toKey], result);
    setTemplate(result);
  }

  const handleGeneratorResult = (message: any) => {
    console.log("WORD STEPS ON MESSAGE", wordSteps);

    console.log("MESSAGE DATA", message.data);
    const { generatorFilePath, resultFilePath, result, generatorString } =
      message.data;
    console.log("generator_result", result);
    const name = generatorString.substring(0, generatorString.indexOf("("));

    const args = generatorString
      .substring(generatorString.indexOf("(") + 1, generatorString.indexOf(")"))
      .split(",");

    logStep(name, args, result, {
      generatorFilePath`,
'commandArg030': ()=>`    resultFilePath`,
'commandArg031': ()=>`  });
    setTemplate(new Function("return " + result)());
  };

  function handleGenericMessage(event: MessageEvent) {
    const message = event.data; // The json data that the extension sent
    switch (message.command) {
      case "file_insert":
        if (isMainTemplate) {
          const { contents, filePath } = message.data;
          const funcPart = argsAndTemplateToFunction([], contents);
          const templ = { [filePath]: funcPart };
          console.log("FILE INSERT", contents, filePath, templ);
          insertTemplateIntoTemplate(templ);
        }
        break;
    }
  }
  useEffect(() => {
    window.addEventListener("message", handleGenericMessage);
    return () => {
      window.removeEventListener("message", handleGenericMessage);
    };
  }, [isMainTemplate]);
  function handleMessage(event: MessageEvent) {
    if (event.data.data.msgId !== msgId) return;
    const message = event.data; // The json data that the extension sent
    switch (message.command) {
      case "generator_result":
        handleGeneratorResult(message);
        break;
    }
  }
  useEffect(() => {
    window.addEventListener("message", handleMessage);
    return () => {
      window.removeEventListener("message", handleMessage);
    };
  }, [wordSteps]);
  function applyGeneratorString(generatorString: string) {
    // form it and send it over
    const generatorRunFile = formGeneratorFile(
      generatorString`,
'commandArg032': ()=>`    template`,
'commandArg033': ()=>`    templateModule`,
'commandArg034': ()=>`    generatorModule
    );
    // send it over via postMessage
    postMessage({
      command: "run_generator"`,
'commandArg035': ()=>`    generatorRunFile`,
'commandArg036': ()=>`    generatorString`,
'commandArg037': ()=>`    pathToConfig: CONFIG_PATH`,
'commandArg038': ()=>`    msgId`,
'commandArg039': ()=>`  });
  }
  console.log("Word steps", wordSteps);
  return {
    template`,
'commandArg040': ()=>`  addKey`,
'commandArg041': ()=>`  addKeyToNumerator`,
'commandArg042': ()=>`  insertTemplateIntoTemplate`,
'commandArg043': ()=>`  insertTemplateIntoTemplateAtKey`,
'commandArg044': ()=>`  wordSteps`,
'commandArg045': ()=>`  applyGeneratorString`,
'commandArg046': ()=>`  removeKey`
}
