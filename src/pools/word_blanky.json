[{"result":"{\n\n}"},{"name":"insertIntoTemplate","args":[{},{}],"full":"insertIntoTemplate([object Object],[object Object])","result":"{\n'fifth.tsxa4023e8966': ()=>`import { cloneDeep, difference, last, uniqueId } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport {\n  appendKeyToKey,\n  dumbCombine,\n  insertIntoTemplate,\n  sortTemplateByDeps,\n  tts,\n  argsAndTemplateToFunction,\n} from \"symmetric-parser\";\nimport { Template } from \"symmetric-parser/dist/src/templator/template-group\";\nimport { formGeneratorFile } from \"./hgcgUtil\";\nimport { CONFIG_PATH } from \"../components/App\";\nimport { customAlphabet } from \"nanoid\";\nimport { WordDefinition } from \"../components/TemplateTree\";\n\nexport type WordStep = {\n  name?: string;\n  args?: any[];\n  result: Template;\n  files?: { generatorFilePath?: string; resultFilePath?: string };\n};\n\nexport function useTemplate(\n  definition: WordDefinition,\n  templateModule: any,\n  generatorModule: any,\n  wordModule: any,\n  postMessage: any,\n  isMainTemplate: boolean\n) {\n  const alphabet =\n    \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n  const nanoid = customAlphabet(alphabet, 4);\n\n  const [msgId, setMsgId] = useState(nanoid());\n  let [template, setTemplate] = useState<Template>(\n    last(definition.wordSteps).result\n  );\n\n  const [wordSteps, setWordSteps] = useState<WordStep[]>(definition.wordSteps);\n  function logStep(name, args, result, files = {}) {\n    console.log(\"PREV STEPS\", wordSteps);\n    const wordStep = {\n      name: name,\n      args: args,\n      result: cloneDeep(result),\n      files,\n    };\n\n    const newWordSteps = [...wordSteps, wordStep];\n    setWordSteps(newWordSteps);\n    const stringifiedSteps = newWordSteps.map((ws) => {\n      return {\n        name: ws.name,\n        args: ws.args,\n        result:\n          typeof ws.result === \"string\" ? ws.result : tts(ws.result, false),\n        files: ws.files,\n      };\n    });\n    console.log(\"STRINGIFIED STEPS\", stringifiedSteps);\n    const wordName = definition.name;\n\n    postMessage({\n      command: \"save_word_steps\",\n      wordSteps: JSON.stringify(stringifiedSteps),\n      wordName,\n      pathToConfig: CONFIG_PATH,\n      msgId,\n    });\n  }\n\n  function removeKey(key: string) {\n    const newTemplate = cloneDeep(template);\n    delete newTemplate[key];\n    logStep(\"deleteKey\", [key], newTemplate);\n    setTemplate(newTemplate);\n  }\n  function addKey(key: string) {\n    const templateHasNumerator = Object.keys(template).some((k) => {\n      return k.split(\"/\")[0] === key;\n    });\n    if (templateHasNumerator) return;\n    let combineWith = { [key]: () => \\`\\` };\n    let newTemplate = dumbCombine(template, combineWith);\n    let result = sortTemplateByDeps(sortTemplateByDeps(newTemplate));\n    logStep(\"dumbCombine\", [template, combineWith], result);\n    setTemplate(result);\n  }\n\n  function addKeyToNumerator(appendKey: string, toKey: string) {\n    const fullToKey = Object.keys(template).find(\n      (k) => k.split(\"/\")[0] === toKey\n    );\n    if (fullToKey != null) {\n      // check that the appendKey isn't already in there\n      const denoms = fullToKey.split(\"/\")[1]?.split(\",\");\n      if (denoms?.includes(appendKey)) {\n        return;\n      }\n    }\n    let newTemplate = appendKeyToKey(template, appendKey, toKey);\n    let result = sortTemplateByDeps(sortTemplateByDeps(newTemplate));\n    logStep(\"appendKeyToKey\", [template, appendKey, toKey], result);\n\n    setTemplate(result);\n  }\n\n  function insertTemplateIntoTemplate(templateToInsert: Template) {\n    console.log(\"inserting template into template\", templateToInsert);\n    let newTemplate = insertIntoTemplate(template, templateToInsert);\n    let result = sortTemplateByDeps(sortTemplateByDeps(newTemplate));\n    logStep(\"insertIntoTemplate\", [template, templateToInsert], result);\n\n    setTemplate(result);\n  }\n  function insertTemplateIntoTemplateAtKey(\n    templateToInsert: Template,\n    toKey: string\n  ) {\n    console.log(\n      \"insertTemplateIntoTemplateAtKey\",\n      templateToInsert,\n      toKey,\n      template\n    );\n    const oldKeys = Object.keys(template);\n    let newTemplate = insertIntoTemplate(template, templateToInsert);\n    logStep(\"insertIntoTemplate\", [template, templateToInsert], newTemplate);\n\n    const newKeys = Object.keys(newTemplate);\n    const newestKey = newKeys\n      .filter((k) => !oldKeys.includes(k))[0]\n      ?.split(\"/\")[0];\n    console.log(\"NEWEST KEY\", newestKey);\n    let appendedTemplate = appendKeyToKey(newTemplate, newestKey, toKey);\n    const result = sortTemplateByDeps(sortTemplateByDeps(appendedTemplate));\n    logStep(\"appendKeyToKey\", [newTemplate, newestKey, toKey], result);\n    setTemplate(result);\n  }\n\n  const handleGeneratorResult = (message: any) => {\n    console.log(\"WORD STEPS ON MESSAGE\", wordSteps);\n\n    console.log(\"MESSAGE DATA\", message.data);\n    const { generatorFilePath, resultFilePath, result, generatorString } =\n      message.data;\n    console.log(\"generator_result\", result);\n    const name = generatorString.substring(0, generatorString.indexOf(\"(\"));\n\n    const args = generatorString\n      .substring(generatorString.indexOf(\"(\") + 1, generatorString.indexOf(\")\"))\n      .split(\",\");\n\n    logStep(name, args, result, {\n      generatorFilePath,\n      resultFilePath,\n    });\n    setTemplate(new Function(\"return \" + result)());\n  };\n\n  function handleGenericMessage(event: MessageEvent) {\n    const message = event.data; // The json data that the extension sent\n    switch (message.command) {\n      case \"file_insert\":\n        if (isMainTemplate) {\n          const { contents, filePath } = message.data;\n          const funcPart = argsAndTemplateToFunction([], contents);\n          const templ = { [filePath]: funcPart };\n          console.log(\"FILE INSERT\", contents, filePath, templ);\n          insertTemplateIntoTemplate(templ);\n        }\n        break;\n    }\n  }\n  useEffect(() => {\n    window.addEventListener(\"message\", handleGenericMessage);\n    return () => {\n      window.removeEventListener(\"message\", handleGenericMessage);\n    };\n  }, [isMainTemplate]);\n  function handleMessage(event: MessageEvent) {\n    if (event.data.data.msgId !== msgId) return;\n    const message = event.data; // The json data that the extension sent\n    switch (message.command) {\n      case \"generator_result\":\n        handleGeneratorResult(message);\n        break;\n    }\n  }\n  useEffect(() => {\n    window.addEventListener(\"message\", handleMessage);\n    return () => {\n      window.removeEventListener(\"message\", handleMessage);\n    };\n  }, [wordSteps]);\n  function applyGeneratorString(generatorString: string) {\n    // form it and send it over\n    const generatorRunFile = formGeneratorFile(\n      generatorString,\n      template,\n      templateModule,\n      generatorModule\n    );\n    // send it over via postMessage\n    postMessage({\n      command: \"run_generator\",\n      generatorRunFile,\n      generatorString,\n      pathToConfig: CONFIG_PATH,\n      msgId,\n    });\n  }\n  console.log(\"Word steps\", wordSteps);\n  return {\n    template,\n    addKey,\n    addKeyToNumerator,\n    insertTemplateIntoTemplate,\n    insertTemplateIntoTemplateAtKey,\n    wordSteps,\n    applyGeneratorString,\n    removeKey,\n  };\n}\n`\n}","files":{}},{"name":"tesRunWord","args":["template"],"full":"tesRunWord(template)","result":"{\n'argProperties225/commandArg225': ({commandArg225})=>`  ${run(commandArg225,'commandArg225')},\n`,\n'argProperties224/commandArg224': ({commandArg224})=>`  ${run(commandArg224,'commandArg224')},\n`,\n'argProperties223/commandArg223': ({commandArg223})=>`  ${run(commandArg223,'commandArg223')},\n`,\n'argProperties222/commandArg222': ({commandArg222})=>`  ${run(commandArg222,'commandArg222')},\n`,\n'argProperties221/commandArg221': ({commandArg221})=>`  ${run(commandArg221,'commandArg221')},\n`,\n'argProperties220/commandArg220': ({commandArg220})=>`  ${run(commandArg220,'commandArg220')},\n`,\n'argProperties219/commandArg219': ({commandArg219})=>`  ${run(commandArg219,'commandArg219')},\n`,\n'argProperties218/commandArg218': ({commandArg218})=>`  ${run(commandArg218,'commandArg218')},\n`,\n'argProperties217/commandArg217': ({commandArg217})=>`  ${run(commandArg217,'commandArg217')},\n`,\n'argProperties216/commandArg216': ({commandArg216})=>`  ${run(commandArg216,'commandArg216')},\n`,\n'argProperties215/commandArg215': ({commandArg215})=>`  ${run(commandArg215,'commandArg215')},\n`,\n'argProperties214/commandArg214': ({commandArg214})=>`  ${run(commandArg214,'commandArg214')},\n`,\n'argProperties213/commandArg213': ({commandArg213})=>`  ${run(commandArg213,'commandArg213')},\n`,\n'argProperties212/commandArg212': ({commandArg212})=>`  ${run(commandArg212,'commandArg212')},\n`,\n'argProperties211/commandArg211': ({commandArg211})=>`  ${run(commandArg211,'commandArg211')},\n`,\n'argProperties210/commandArg210': ({commandArg210})=>`  ${run(commandArg210,'commandArg210')},\n`,\n'argProperties29/commandArg29': ({commandArg29})=>`  ${run(commandArg29,'commandArg29')},\n`,\n'argProperties28/commandArg28': ({commandArg28})=>`  ${run(commandArg28,'commandArg28')},\n`,\n'argProperties24/commandArg24': ({commandArg24})=>`  ${run(commandArg24,'commandArg24')},\n`,\n'argProperties23/commandArg23': ({commandArg23})=>`  ${run(commandArg23,'commandArg23')},\n`,\n'argProperties22/commandArg22': ({commandArg22})=>`  ${run(commandArg22,'commandArg22')},\n`,\n'commandSend02/commandBody02': ({commandBody02})=>`postMessage({${run(commandBody02,'commandBody02')}});`,\n'commandSend01/commandBody01': ({commandBody01})=>`postMessage({${run(commandBody01,'commandBody01')}});`,\n'commandBody01/argProperties21,argProperties22,argProperties23,argProperties24': ({argProperties21, argProperties22, argProperties23, argProperties24})=>`\n${run(argProperties21, 'argProperties21')}${run(argProperties22, 'argProperties22')}${run(argProperties23, 'argProperties23')}${run(argProperties24, 'argProperties24')}    `,\n'commandBody02/argProperties21,argProperties25,argProperties26,argProperties27': ({argProperties21, argProperties25, argProperties26, argProperties27})=>`\n${run(argProperties21, 'argProperties21')}${run(argProperties25, 'argProperties25')}${run(argProperties26, 'argProperties26')}${run(argProperties27, 'argProperties27')}    `,\n'argProperties27/commandArg27': ({commandArg27})=>`  ${run(commandArg27,'commandArg27')},\n`,\n'argProperties26/commandArg26': ({commandArg26})=>`  ${run(commandArg26,'commandArg26')},\n`,\n'argProperties25/commandArg25': ({commandArg25})=>`  ${run(commandArg25,'commandArg25')},\n`,\n'argProperties21/commandArg21': ({commandArg21})=>`  ${run(commandArg21,'commandArg21')},\n`,\n'commandArg21/nameProperty11': ({nameProperty11})=>`    ${run(nameProperty11, 'nameProperty11')}\n      generatorRunFile`,\n'nameProperty11/commandName11': ({commandName11})=>`command: \"${run(commandName11,'commandName11')}\",`,\n'commandArg21/nameProperty12': ({nameProperty12})=>`    ${run(nameProperty12, 'nameProperty12')}\n      wordSteps: JSON.stringify(stringifiedSteps)`,\n'nameProperty12/commandName12': ({commandName12})=>`command: \"${run(commandName12,'commandName12')}\",`,\n'fifth.tsxa4023e8966/argProperties21,argProperties28,argProperties29,argProperties210,argProperties211,argProperties212,argProperties213,argProperties214,argProperties215,argProperties216,argProperties217,argProperties218,argProperties219,argProperties220,argProperties221,argProperties222,argProperties223,argProperties224,argProperties225,commandSend01,commandSend02': ({argProperties21, argProperties28, argProperties29, argProperties210, argProperties211, argProperties212, argProperties213, argProperties214, argProperties215, argProperties216, argProperties217, argProperties218, argProperties219, argProperties220, argProperties221, argProperties222, argProperties223, argProperties224, argProperties225, commandSend01, commandSend02})=>`import { cloneDeep, difference, last, uniqueId } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport {\n${run(argProperties21, 'argProperties21')}${run(argProperties28, 'argProperties28')}${run(argProperties29, 'argProperties29')}${run(argProperties210, 'argProperties210')}${run(argProperties211, 'argProperties211')}${run(argProperties212, 'argProperties212')}} from \"symmetric-parser\";\nimport { Template } from \"symmetric-parser/dist/src/templator/template-group\";\nimport { formGeneratorFile } from \"./hgcgUtil\";\nimport { CONFIG_PATH } from \"../components/App\";\nimport { customAlphabet } from \"nanoid\";\nimport { WordDefinition } from \"../components/TemplateTree\";\n\nexport type WordStep = {\n${run(argProperties213, 'argProperties213')}${run(argProperties214, 'argProperties214')}${run(argProperties215, 'argProperties215')}${run(argProperties216, 'argProperties216')}${run(argProperties217, 'argProperties217')}${run(argProperties218, 'argProperties218')}${run(argProperties219, 'argProperties219')}${run(argProperties220, 'argProperties220')}${run(argProperties221, 'argProperties221')}${run(argProperties222, 'argProperties222')}${run(argProperties223, 'argProperties223')}${run(argProperties224, 'argProperties224')}${run(argProperties225, 'argProperties225')}      };\n    });\n    console.log(\"STRINGIFIED STEPS\", stringifiedSteps);\n    const wordName = definition.name;\n\n    ${run(commandSend01, 'commandSend01')}\n  }\n\n  function removeKey(key: string) {\n    const newTemplate = cloneDeep(template);\n    delete newTemplate[key];\n    logStep(\"deleteKey\", [key], newTemplate);\n    setTemplate(newTemplate);\n  }\n  function addKey(key: string) {\n    const templateHasNumerator = Object.keys(template).some((k) => {\n      return k.split(\"/\")[0] === key;\n    });\n    if (templateHasNumerator) return;\n    let combineWith = { [key]: () => \\`\\` };\n    let newTemplate = dumbCombine(template, combineWith);\n    let result = sortTemplateByDeps(sortTemplateByDeps(newTemplate));\n    logStep(\"dumbCombine\", [template, combineWith], result);\n    setTemplate(result);\n  }\n\n  function addKeyToNumerator(appendKey: string, toKey: string) {\n    const fullToKey = Object.keys(template).find(\n      (k) => k.split(\"/\")[0] === toKey\n    );\n    if (fullToKey != null) {\n      // check that the appendKey isn't already in there\n      const denoms = fullToKey.split(\"/\")[1]?.split(\",\");\n      if (denoms?.includes(appendKey)) {\n        return;\n      }\n    }\n    let newTemplate = appendKeyToKey(template, appendKey, toKey);\n    let result = sortTemplateByDeps(sortTemplateByDeps(newTemplate));\n    logStep(\"appendKeyToKey\", [template, appendKey, toKey], result);\n\n    setTemplate(result);\n  }\n\n  function insertTemplateIntoTemplate(templateToInsert: Template) {\n    console.log(\"inserting template into template\", templateToInsert);\n    let newTemplate = insertIntoTemplate(template, templateToInsert);\n    let result = sortTemplateByDeps(sortTemplateByDeps(newTemplate));\n    logStep(\"insertIntoTemplate\", [template, templateToInsert], result);\n\n    setTemplate(result);\n  }\n  function insertTemplateIntoTemplateAtKey(\n    templateToInsert: Template,\n    toKey: string\n  ) {\n    console.log(\n      \"insertTemplateIntoTemplateAtKey\",\n      templateToInsert,\n      toKey,\n      template\n    );\n    const oldKeys = Object.keys(template);\n    let newTemplate = insertIntoTemplate(template, templateToInsert);\n    logStep(\"insertIntoTemplate\", [template, templateToInsert], newTemplate);\n\n    const newKeys = Object.keys(newTemplate);\n    const newestKey = newKeys\n      .filter((k) => !oldKeys.includes(k))[0]\n      ?.split(\"/\")[0];\n    console.log(\"NEWEST KEY\", newestKey);\n    let appendedTemplate = appendKeyToKey(newTemplate, newestKey, toKey);\n    const result = sortTemplateByDeps(sortTemplateByDeps(appendedTemplate));\n    logStep(\"appendKeyToKey\", [newTemplate, newestKey, toKey], result);\n    setTemplate(result);\n  }\n\n  const handleGeneratorResult = (message: any) => {\n    console.log(\"WORD STEPS ON MESSAGE\", wordSteps);\n\n    console.log(\"MESSAGE DATA\", message.data);\n    const { generatorFilePath, resultFilePath, result, generatorString } =\n      message.data;\n    console.log(\"generator_result\", result);\n    const name = generatorString.substring(0, generatorString.indexOf(\"(\"));\n\n    const args = generatorString\n      .substring(generatorString.indexOf(\"(\") + 1, generatorString.indexOf(\")\"))\n      .split(\",\");\n\n    logStep(name, args, result, {\n      generatorFilePath,\n      resultFilePath,\n    });\n    setTemplate(new Function(\"return \" + result)());\n  };\n\n  function handleGenericMessage(event: MessageEvent) {\n    const message = event.data; // The json data that the extension sent\n    switch (message.command) {\n      case \"file_insert\":\n        if (isMainTemplate) {\n          const { contents, filePath } = message.data;\n          const funcPart = argsAndTemplateToFunction([], contents);\n          const templ = { [filePath]: funcPart };\n          console.log(\"FILE INSERT\", contents, filePath, templ);\n          insertTemplateIntoTemplate(templ);\n        }\n        break;\n    }\n  }\n  useEffect(() => {\n    window.addEventListener(\"message\", handleGenericMessage);\n    return () => {\n      window.removeEventListener(\"message\", handleGenericMessage);\n    };\n  }, [isMainTemplate]);\n  function handleMessage(event: MessageEvent) {\n    if (event.data.data.msgId !== msgId) return;\n    const message = event.data; // The json data that the extension sent\n    switch (message.command) {\n      case \"generator_result\":\n        handleGeneratorResult(message);\n        break;\n    }\n  }\n  useEffect(() => {\n    window.addEventListener(\"message\", handleMessage);\n    return () => {\n      window.removeEventListener(\"message\", handleMessage);\n    };\n  }, [wordSteps]);\n  function applyGeneratorString(generatorString: string) {\n    // form it and send it over\n    const generatorRunFile = formGeneratorFile(\n      generatorString,\n      template,\n      templateModule,\n      generatorModule\n    );\n    // send it over via postMessage\n    ${run(commandSend02, 'commandSend02')}\n  }\n  console.log(\"Word steps\", wordSteps);\n  return {\n    template,\n    addKey,\n    addKeyToNumerator,\n    insertTemplateIntoTemplate,\n    insertTemplateIntoTemplateAtKey,\n    wordSteps,\n    applyGeneratorString,\n    removeKey,\n  };\n}\n`,\n'commandArg21': ()=>`appendKeyToKey`,\n'commandArg22': ()=>`    wordName`,\n'commandArg23': ()=>`    pathToConfig: CONFIG_PATH`,\n'commandArg24': ()=>`    msgId`,\n'commandArg25': ()=>`    generatorString`,\n'commandArg26': ()=>`    pathToConfig: CONFIG_PATH`,\n'commandArg27': ()=>`    msgId`,\n'commandArg28': ()=>`dumbCombine`,\n'commandArg29': ()=>`insertIntoTemplate`,\n'commandArg210': ()=>`sortTemplateByDeps`,\n'commandArg211': ()=>`tts`,\n'commandArg212': ()=>`argsAndTemplateToFunction`,\n'commandArg213': ()=>`name?: string;\n  args?: any[];\n  result: Template;\n  files?: { generatorFilePath?: string; resultFilePath?: string };\n};\n\nexport function useTemplate(\n  definition: WordDefinition`,\n'commandArg214': ()=>`templateModule: any`,\n'commandArg215': ()=>`generatorModule: any`,\n'commandArg216': ()=>`wordModule: any`,\n'commandArg217': ()=>`postMessage: any`,\n'commandArg218': ()=>`isMainTemplate: boolean\n) {\n  const alphabet =\n    \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n  const nanoid = customAlphabet(alphabet, 4);\n\n  const [msgId, setMsgId] = useState(nanoid());\n  let [template, setTemplate] = useState<Template>(\n    last(definition.wordSteps).result\n  );\n\n  const [wordSteps, setWordSteps] = useState<WordStep[]>(definition.wordSteps);\n  function logStep(name, args, result, files = {}) {\n    console.log(\"PREV STEPS\", wordSteps);\n    const wordStep = {\n      name: name`,\n'commandArg219': ()=>`    args: args`,\n'commandArg220': ()=>`    result: cloneDeep(result)`,\n'commandArg221': ()=>`    files`,\n'commandArg222': ()=>`  };\n\n    const newWordSteps = [...wordSteps, wordStep];\n    setWordSteps(newWordSteps);\n    const stringifiedSteps = newWordSteps.map((ws) => {\n      return {\n        name: ws.name`,\n'commandArg223': ()=>`      args: ws.args`,\n'commandArg224': ()=>`      result:\n          typeof ws.result === \"string\" ? ws.result : tts(ws.result, false)`,\n'commandArg225': ()=>`      files: ws.files`,\n'commandName11': ()=>`run_generator`,\n'commandName12': ()=>`save_word_steps`\n}\n","files":{"wordRunFilePath":"/Users/jaykoontz/Documents/GitHub/symmetric-blueprints/src/pools/1733695124184_wordRun.ts","resultFilePath":"/Users/jaykoontz/Documents/GitHub/symmetric-blueprints/src/pools/1733695124184_result"}}]