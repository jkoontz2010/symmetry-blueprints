[{"result":"{\n\n}"},{"name":"insertIntoTemplate","args":[{},{}],"full":"insertIntoTemplate([object Object],[object Object])","result":"{\n'fifth.tsxa4023e8966': ()=>`import { cloneDeep, difference, last, uniqueId } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport {\n  appendKeyToKey,\n  dumbCombine,\n  insertIntoTemplate,\n  sortTemplateByDeps,\n  tts,\n  argsAndTemplateToFunction,\n} from \"symmetric-parser\";\nimport { Template } from \"symmetric-parser/dist/src/templator/template-group\";\nimport { formGeneratorFile } from \"./hgcgUtil\";\nimport { CONFIG_PATH } from \"../components/App\";\nimport { customAlphabet } from \"nanoid\";\nimport { WordDefinition } from \"../components/TemplateTree\";\n\nexport type WordStep = {\n  name?: string;\n  args?: any[];\n  result: Template;\n  files?: { generatorFilePath?: string; resultFilePath?: string };\n};\n\nexport function useTemplate(\n  definition: WordDefinition,\n  templateModule: any,\n  generatorModule: any,\n  wordModule: any,\n  postMessage: any,\n  isMainTemplate: boolean\n) {\n  const alphabet =\n    \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n  const nanoid = customAlphabet(alphabet, 4);\n\n  const [msgId, setMsgId] = useState(nanoid());\n  let [template, setTemplate] = useState<Template>(\n    last(definition.wordSteps).result\n  );\n\n  const [wordSteps, setWordSteps] = useState<WordStep[]>(definition.wordSteps);\n  function logStep(name, args, result, files = {}) {\n    console.log(\"PREV STEPS\", wordSteps);\n    const wordStep = {\n      name: name,\n      args: args,\n      result: cloneDeep(result),\n      files,\n    };\n\n    const newWordSteps = [...wordSteps, wordStep];\n    setWordSteps(newWordSteps);\n    const stringifiedSteps = newWordSteps.map((ws) => {\n      return {\n        name: ws.name,\n        args: ws.args,\n        result:\n          typeof ws.result === \"string\" ? ws.result : tts(ws.result, false),\n        files: ws.files,\n      };\n    });\n    console.log(\"STRINGIFIED STEPS\", stringifiedSteps);\n    const wordName = definition.name;\n\n    postMessage({\n      command: \"save_word_steps\",\n      wordSteps: JSON.stringify(stringifiedSteps),\n      wordName,\n      pathToConfig: CONFIG_PATH,\n      msgId,\n    });\n  }\n\n  function removeKey(key: string) {\n    const newTemplate = cloneDeep(template);\n    delete newTemplate[key];\n    logStep(\"deleteKey\", [key], newTemplate);\n    setTemplate(newTemplate);\n  }\n  function addKey(key: string) {\n    const templateHasNumerator = Object.keys(template).some((k) => {\n      return k.split(\"/\")[0] === key;\n    });\n    if (templateHasNumerator) return;\n    let combineWith = { [key]: () => \\`\\` };\n    let newTemplate = dumbCombine(template, combineWith);\n    let result = sortTemplateByDeps(sortTemplateByDeps(newTemplate));\n    logStep(\"dumbCombine\", [template, combineWith], result);\n    setTemplate(result);\n  }\n\n  function addKeyToNumerator(appendKey: string, toKey: string) {\n    const fullToKey = Object.keys(template).find(\n      (k) => k.split(\"/\")[0] === toKey\n    );\n    if (fullToKey != null) {\n      // check that the appendKey isn't already in there\n      const denoms = fullToKey.split(\"/\")[1]?.split(\",\");\n      if (denoms?.includes(appendKey)) {\n        return;\n      }\n    }\n    let newTemplate = appendKeyToKey(template, appendKey, toKey);\n    let result = sortTemplateByDeps(sortTemplateByDeps(newTemplate));\n    logStep(\"appendKeyToKey\", [template, appendKey, toKey], result);\n\n    setTemplate(result);\n  }\n\n  function insertTemplateIntoTemplate(templateToInsert: Template) {\n    console.log(\"inserting template into template\", templateToInsert);\n    let newTemplate = insertIntoTemplate(template, templateToInsert);\n    let result = sortTemplateByDeps(sortTemplateByDeps(newTemplate));\n    logStep(\"insertIntoTemplate\", [template, templateToInsert], result);\n\n    setTemplate(result);\n  }\n  function insertTemplateIntoTemplateAtKey(\n    templateToInsert: Template,\n    toKey: string\n  ) {\n    console.log(\n      \"insertTemplateIntoTemplateAtKey\",\n      templateToInsert,\n      toKey,\n      template\n    );\n    const oldKeys = Object.keys(template);\n    let newTemplate = insertIntoTemplate(template, templateToInsert);\n    logStep(\"insertIntoTemplate\", [template, templateToInsert], newTemplate);\n\n    const newKeys = Object.keys(newTemplate);\n    const newestKey = newKeys\n      .filter((k) => !oldKeys.includes(k))[0]\n      ?.split(\"/\")[0];\n    console.log(\"NEWEST KEY\", newestKey);\n    let appendedTemplate = appendKeyToKey(newTemplate, newestKey, toKey);\n    const result = sortTemplateByDeps(sortTemplateByDeps(appendedTemplate));\n    logStep(\"appendKeyToKey\", [newTemplate, newestKey, toKey], result);\n    setTemplate(result);\n  }\n\n  const handleGeneratorResult = (message: any) => {\n    console.log(\"WORD STEPS ON MESSAGE\", wordSteps);\n\n    console.log(\"MESSAGE DATA\", message.data);\n    const { generatorFilePath, resultFilePath, result, generatorString } =\n      message.data;\n    console.log(\"generator_result\", result);\n    const name = generatorString.substring(0, generatorString.indexOf(\"(\"));\n\n    const args = generatorString\n      .substring(generatorString.indexOf(\"(\") + 1, generatorString.indexOf(\")\"))\n      .split(\",\");\n\n    logStep(name, args, result, {\n      generatorFilePath,\n      resultFilePath,\n    });\n    setTemplate(new Function(\"return \" + result)());\n  };\n\n  function handleGenericMessage(event: MessageEvent) {\n    const message = event.data; // The json data that the extension sent\n    switch (message.command) {\n      case \"file_insert\":\n        if (isMainTemplate) {\n          const { contents, filePath } = message.data;\n          const funcPart = argsAndTemplateToFunction([], contents);\n          const templ = { [filePath]: funcPart };\n          console.log(\"FILE INSERT\", contents, filePath, templ);\n          insertTemplateIntoTemplate(templ);\n        }\n        break;\n    }\n  }\n  useEffect(() => {\n    window.addEventListener(\"message\", handleGenericMessage);\n    return () => {\n      window.removeEventListener(\"message\", handleGenericMessage);\n    };\n  }, [isMainTemplate]);\n  function handleMessage(event: MessageEvent) {\n    if (event.data.data.msgId !== msgId) return;\n    const message = event.data; // The json data that the extension sent\n    switch (message.command) {\n      case \"generator_result\":\n        handleGeneratorResult(message);\n        break;\n    }\n  }\n  useEffect(() => {\n    window.addEventListener(\"message\", handleMessage);\n    return () => {\n      window.removeEventListener(\"message\", handleMessage);\n    };\n  }, [wordSteps]);\n  function applyGeneratorString(generatorString: string) {\n    // form it and send it over\n    const generatorRunFile = formGeneratorFile(\n      generatorString,\n      template,\n      templateModule,\n      generatorModule\n    );\n    // send it over via postMessage\n    postMessage({\n      command: \"run_generator\",\n      generatorRunFile,\n      generatorString,\n      pathToConfig: CONFIG_PATH,\n      msgId,\n    });\n  }\n  console.log(\"Word steps\", wordSteps);\n  return {\n    template,\n    addKey,\n    addKeyToNumerator,\n    insertTemplateIntoTemplate,\n    insertTemplateIntoTemplateAtKey,\n    wordSteps,\n    applyGeneratorString,\n    removeKey,\n  };\n}\n`\n}","files":{}},{"name":"orderedParse","args":["template"," [postCmdArgument]"],"full":"orderedParse(template, [postCmdArgument])","result":"{\n'postCmdArgument046/commandArg046': ({commandArg046})=>`  ${run(commandArg046,'commandArg046')},\n`,\n'postCmdArgument045/commandArg045': ({commandArg045})=>`  ${run(commandArg045,'commandArg045')},\n`,\n'postCmdArgument044/commandArg044': ({commandArg044})=>`  ${run(commandArg044,'commandArg044')},\n`,\n'postCmdArgument043/commandArg043': ({commandArg043})=>`  ${run(commandArg043,'commandArg043')},\n`,\n'postCmdArgument042/commandArg042': ({commandArg042})=>`  ${run(commandArg042,'commandArg042')},\n`,\n'postCmdArgument041/commandArg041': ({commandArg041})=>`  ${run(commandArg041,'commandArg041')},\n`,\n'postCmdArgument040/commandArg040': ({commandArg040})=>`  ${run(commandArg040,'commandArg040')},\n`,\n'postCmdArgument039/commandArg039': ({commandArg039})=>`  ${run(commandArg039,'commandArg039')},\n`,\n'postCmdArgument038/commandArg038': ({commandArg038})=>`  ${run(commandArg038,'commandArg038')},\n`,\n'postCmdArgument037/commandArg037': ({commandArg037})=>`  ${run(commandArg037,'commandArg037')},\n`,\n'postCmdArgument036/commandArg036': ({commandArg036})=>`  ${run(commandArg036,'commandArg036')},\n`,\n'postCmdArgument035/commandArg035': ({commandArg035})=>`  ${run(commandArg035,'commandArg035')},\n`,\n'postCmdArgument034/commandArg034': ({commandArg034})=>`  ${run(commandArg034,'commandArg034')},\n`,\n'postCmdArgument033/commandArg033': ({commandArg033})=>`  ${run(commandArg033,'commandArg033')},\n`,\n'postCmdArgument032/commandArg032': ({commandArg032})=>`  ${run(commandArg032,'commandArg032')},\n`,\n'postCmdArgument031/commandArg031': ({commandArg031})=>`  ${run(commandArg031,'commandArg031')},\n`,\n'postCmdArgument030/commandArg030': ({commandArg030})=>`  ${run(commandArg030,'commandArg030')},\n`,\n'postCmdArgument029/commandArg029': ({commandArg029})=>`  ${run(commandArg029,'commandArg029')},\n`,\n'postCmdArgument028/commandArg028': ({commandArg028})=>`  ${run(commandArg028,'commandArg028')},\n`,\n'postCmdArgument027/commandArg027': ({commandArg027})=>`  ${run(commandArg027,'commandArg027')},\n`,\n'postCmdArgument026/commandArg026': ({commandArg026})=>`  ${run(commandArg026,'commandArg026')},\n`,\n'postCmdArgument025/commandArg025': ({commandArg025})=>`  ${run(commandArg025,'commandArg025')},\n`,\n'postCmdArgument024/commandArg024': ({commandArg024})=>`  ${run(commandArg024,'commandArg024')},\n`,\n'postCmdArgument023/commandArg023': ({commandArg023})=>`  ${run(commandArg023,'commandArg023')},\n`,\n'postCmdArgument022/commandArg022': ({commandArg022})=>`  ${run(commandArg022,'commandArg022')},\n`,\n'postCmdArgument021/commandArg021': ({commandArg021})=>`  ${run(commandArg021,'commandArg021')},\n`,\n'postCmdArgument020/commandArg020': ({commandArg020})=>`  ${run(commandArg020,'commandArg020')},\n`,\n'postCmdArgument019/commandArg019': ({commandArg019})=>`  ${run(commandArg019,'commandArg019')},\n`,\n'postCmdArgument018/commandArg018': ({commandArg018})=>`  ${run(commandArg018,'commandArg018')},\n`,\n'postCmdArgument017/commandArg017': ({commandArg017})=>`  ${run(commandArg017,'commandArg017')},\n`,\n'postCmdArgument016/commandArg016': ({commandArg016})=>`  ${run(commandArg016,'commandArg016')},\n`,\n'postCmdArgument015/commandArg015': ({commandArg015})=>`  ${run(commandArg015,'commandArg015')},\n`,\n'postCmdArgument014/commandArg014': ({commandArg014})=>`  ${run(commandArg014,'commandArg014')},\n`,\n'postCmdArgument013/commandArg013': ({commandArg013})=>`  ${run(commandArg013,'commandArg013')},\n`,\n'postCmdArgument012/commandArg012': ({commandArg012})=>`  ${run(commandArg012,'commandArg012')},\n`,\n'postCmdArgument011/commandArg011': ({commandArg011})=>`  ${run(commandArg011,'commandArg011')},\n`,\n'postCmdArgument010/commandArg010': ({commandArg010})=>`  ${run(commandArg010,'commandArg010')},\n`,\n'postCmdArgument09/commandArg09': ({commandArg09})=>`  ${run(commandArg09,'commandArg09')},\n`,\n'postCmdArgument08/commandArg08': ({commandArg08})=>`  ${run(commandArg08,'commandArg08')},\n`,\n'postCmdArgument07/commandArg07': ({commandArg07})=>`  ${run(commandArg07,'commandArg07')},\n`,\n'postCmdArgument06/commandArg06': ({commandArg06})=>`  ${run(commandArg06,'commandArg06')},\n`,\n'postCmdArgument05/commandArg05': ({commandArg05})=>`  ${run(commandArg05,'commandArg05')},\n`,\n'postCmdArgument04/commandArg04': ({commandArg04})=>`  ${run(commandArg04,'commandArg04')},\n`,\n'postCmdArgument03/commandArg03': ({commandArg03})=>`  ${run(commandArg03,'commandArg03')},\n`,\n'postCmdArgument02/commandArg02': ({commandArg02})=>`  ${run(commandArg02,'commandArg02')},\n`,\n'postCmdArgument01/commandArg01': ({commandArg01})=>`  ${run(commandArg01,'commandArg01')},\n`,\n'fifth.tsxa4023e8966/postCmdArgument01,postCmdArgument02,postCmdArgument03,postCmdArgument04,postCmdArgument05,postCmdArgument06,postCmdArgument07,postCmdArgument08,postCmdArgument09,postCmdArgument010,postCmdArgument011,postCmdArgument012,postCmdArgument013,postCmdArgument014,postCmdArgument015,postCmdArgument016,postCmdArgument017,postCmdArgument018,postCmdArgument019,postCmdArgument020,postCmdArgument021,postCmdArgument022,postCmdArgument023,postCmdArgument024,postCmdArgument025,postCmdArgument026,postCmdArgument027,postCmdArgument028,postCmdArgument029,postCmdArgument030,postCmdArgument031,postCmdArgument032,postCmdArgument033,postCmdArgument034,postCmdArgument035,postCmdArgument036,postCmdArgument037,postCmdArgument038,postCmdArgument039,postCmdArgument040,postCmdArgument041,postCmdArgument042,postCmdArgument043,postCmdArgument044,postCmdArgument045,postCmdArgument046': ({postCmdArgument01, postCmdArgument02, postCmdArgument03, postCmdArgument04, postCmdArgument05, postCmdArgument06, postCmdArgument07, postCmdArgument08, postCmdArgument09, postCmdArgument010, postCmdArgument011, postCmdArgument012, postCmdArgument013, postCmdArgument014, postCmdArgument015, postCmdArgument016, postCmdArgument017, postCmdArgument018, postCmdArgument019, postCmdArgument020, postCmdArgument021, postCmdArgument022, postCmdArgument023, postCmdArgument024, postCmdArgument025, postCmdArgument026, postCmdArgument027, postCmdArgument028, postCmdArgument029, postCmdArgument030, postCmdArgument031, postCmdArgument032, postCmdArgument033, postCmdArgument034, postCmdArgument035, postCmdArgument036, postCmdArgument037, postCmdArgument038, postCmdArgument039, postCmdArgument040, postCmdArgument041, postCmdArgument042, postCmdArgument043, postCmdArgument044, postCmdArgument045, postCmdArgument046})=>`import { cloneDeep, difference, last, uniqueId } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport {\n${run(postCmdArgument01, 'postCmdArgument01')}${run(postCmdArgument02, 'postCmdArgument02')}${run(postCmdArgument03, 'postCmdArgument03')}${run(postCmdArgument04, 'postCmdArgument04')}${run(postCmdArgument05, 'postCmdArgument05')}${run(postCmdArgument06, 'postCmdArgument06')}} from \"symmetric-parser\";\nimport { Template } from \"symmetric-parser/dist/src/templator/template-group\";\nimport { formGeneratorFile } from \"./hgcgUtil\";\nimport { CONFIG_PATH } from \"../components/App\";\nimport { customAlphabet } from \"nanoid\";\nimport { WordDefinition } from \"../components/TemplateTree\";\n\nexport type WordStep = {\n${run(postCmdArgument07, 'postCmdArgument07')}${run(postCmdArgument08, 'postCmdArgument08')}${run(postCmdArgument09, 'postCmdArgument09')}${run(postCmdArgument010, 'postCmdArgument010')}${run(postCmdArgument011, 'postCmdArgument011')}${run(postCmdArgument012, 'postCmdArgument012')}${run(postCmdArgument013, 'postCmdArgument013')}${run(postCmdArgument014, 'postCmdArgument014')}${run(postCmdArgument015, 'postCmdArgument015')}${run(postCmdArgument016, 'postCmdArgument016')}${run(postCmdArgument017, 'postCmdArgument017')}${run(postCmdArgument018, 'postCmdArgument018')}${run(postCmdArgument019, 'postCmdArgument019')}${run(postCmdArgument020, 'postCmdArgument020')}${run(postCmdArgument021, 'postCmdArgument021')}${run(postCmdArgument022, 'postCmdArgument022')}${run(postCmdArgument023, 'postCmdArgument023')}${run(postCmdArgument024, 'postCmdArgument024')}${run(postCmdArgument025, 'postCmdArgument025')}${run(postCmdArgument026, 'postCmdArgument026')}${run(postCmdArgument027, 'postCmdArgument027')}${run(postCmdArgument028, 'postCmdArgument028')}${run(postCmdArgument029, 'postCmdArgument029')}${run(postCmdArgument030, 'postCmdArgument030')}${run(postCmdArgument031, 'postCmdArgument031')}${run(postCmdArgument032, 'postCmdArgument032')}${run(postCmdArgument033, 'postCmdArgument033')}${run(postCmdArgument034, 'postCmdArgument034')}${run(postCmdArgument035, 'postCmdArgument035')}${run(postCmdArgument036, 'postCmdArgument036')}${run(postCmdArgument037, 'postCmdArgument037')}${run(postCmdArgument038, 'postCmdArgument038')}${run(postCmdArgument039, 'postCmdArgument039')}${run(postCmdArgument040, 'postCmdArgument040')}${run(postCmdArgument041, 'postCmdArgument041')}${run(postCmdArgument042, 'postCmdArgument042')}${run(postCmdArgument043, 'postCmdArgument043')}${run(postCmdArgument044, 'postCmdArgument044')}${run(postCmdArgument045, 'postCmdArgument045')}${run(postCmdArgument046, 'postCmdArgument046')}  };\n}\n`,\n'commandArg01': ()=>`appendKeyToKey`,\n'commandArg02': ()=>`dumbCombine`,\n'commandArg03': ()=>`insertIntoTemplate`,\n'commandArg04': ()=>`sortTemplateByDeps`,\n'commandArg05': ()=>`tts`,\n'commandArg06': ()=>`argsAndTemplateToFunction`,\n'commandArg07': ()=>`name?: string;\n  args?: any[];\n  result: Template;\n  files?: { generatorFilePath?: string; resultFilePath?: string };\n};\n\nexport function useTemplate(\n  definition: WordDefinition`,\n'commandArg08': ()=>`templateModule: any`,\n'commandArg09': ()=>`generatorModule: any`,\n'commandArg010': ()=>`wordModule: any`,\n'commandArg011': ()=>`postMessage: any`,\n'commandArg012': ()=>`isMainTemplate: boolean\n) {\n  const alphabet =\n    \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n  const nanoid = customAlphabet(alphabet, 4);\n\n  const [msgId, setMsgId] = useState(nanoid());\n  let [template, setTemplate] = useState<Template>(\n    last(definition.wordSteps).result\n  );\n\n  const [wordSteps, setWordSteps] = useState<WordStep[]>(definition.wordSteps);\n  function logStep(name, args, result, files = {}) {\n    console.log(\"PREV STEPS\", wordSteps);\n    const wordStep = {\n      name: name`,\n'commandArg013': ()=>`    args: args`,\n'commandArg014': ()=>`    result: cloneDeep(result)`,\n'commandArg015': ()=>`    files`,\n'commandArg016': ()=>`  };\n\n    const newWordSteps = [...wordSteps, wordStep];\n    setWordSteps(newWordSteps);\n    const stringifiedSteps = newWordSteps.map((ws) => {\n      return {\n        name: ws.name`,\n'commandArg017': ()=>`      args: ws.args`,\n'commandArg018': ()=>`      result:\n          typeof ws.result === \"string\" ? ws.result : tts(ws.result, false)`,\n'commandArg019': ()=>`      files: ws.files`,\n'commandArg020': ()=>`    };\n    });\n    console.log(\"STRINGIFIED STEPS\", stringifiedSteps);\n    const wordName = definition.name;\n\n    postMessage({\n      command: \"save_word_steps\"`,\n'commandArg021': ()=>`    wordSteps: JSON.stringify(stringifiedSteps)`,\n'commandArg022': ()=>`    wordName`,\n'commandArg023': ()=>`    pathToConfig: CONFIG_PATH`,\n'commandArg024': ()=>`    msgId`,\n'commandArg025': ()=>`  });\n  }\n\n  function removeKey(key: string) {\n    const newTemplate = cloneDeep(template);\n    delete newTemplate[key];\n    logStep(\"deleteKey\", [key], newTemplate);\n    setTemplate(newTemplate);\n  }\n  function addKey(key: string) {\n    const templateHasNumerator = Object.keys(template).some((k) => {\n      return k.split(\"/\")[0] === key;\n    });\n    if (templateHasNumerator) return;\n    let combineWith = { [key]: () => \\`\\` };\n    let newTemplate = dumbCombine(template, combineWith);\n    let result = sortTemplateByDeps(sortTemplateByDeps(newTemplate));\n    logStep(\"dumbCombine\", [template, combineWith], result);\n    setTemplate(result);\n  }\n\n  function addKeyToNumerator(appendKey: string, toKey: string) {\n    const fullToKey = Object.keys(template).find(\n      (k) => k.split(\"/\")[0] === toKey\n    );\n    if (fullToKey != null) {\n      // check that the appendKey isn't already in there\n      const denoms = fullToKey.split(\"/\")[1]?.split(\",\");\n      if (denoms?.includes(appendKey)) {\n        return;\n      }\n    }\n    let newTemplate = appendKeyToKey(template, appendKey, toKey);\n    let result = sortTemplateByDeps(sortTemplateByDeps(newTemplate));\n    logStep(\"appendKeyToKey\", [template, appendKey, toKey], result);\n\n    setTemplate(result);\n  }\n\n  function insertTemplateIntoTemplate(templateToInsert: Template) {\n    console.log(\"inserting template into template\", templateToInsert);\n    let newTemplate = insertIntoTemplate(template, templateToInsert);\n    let result = sortTemplateByDeps(sortTemplateByDeps(newTemplate));\n    logStep(\"insertIntoTemplate\", [template, templateToInsert], result);\n\n    setTemplate(result);\n  }\n  function insertTemplateIntoTemplateAtKey(\n    templateToInsert: Template`,\n'commandArg026': ()=>`  toKey: string\n  ) {\n    console.log(\n      \"insertTemplateIntoTemplateAtKey\"`,\n'commandArg027': ()=>`    templateToInsert`,\n'commandArg028': ()=>`    toKey`,\n'commandArg029': ()=>`    template\n    );\n    const oldKeys = Object.keys(template);\n    let newTemplate = insertIntoTemplate(template, templateToInsert);\n    logStep(\"insertIntoTemplate\", [template, templateToInsert], newTemplate);\n\n    const newKeys = Object.keys(newTemplate);\n    const newestKey = newKeys\n      .filter((k) => !oldKeys.includes(k))[0]\n      ?.split(\"/\")[0];\n    console.log(\"NEWEST KEY\", newestKey);\n    let appendedTemplate = appendKeyToKey(newTemplate, newestKey, toKey);\n    const result = sortTemplateByDeps(sortTemplateByDeps(appendedTemplate));\n    logStep(\"appendKeyToKey\", [newTemplate, newestKey, toKey], result);\n    setTemplate(result);\n  }\n\n  const handleGeneratorResult = (message: any) => {\n    console.log(\"WORD STEPS ON MESSAGE\", wordSteps);\n\n    console.log(\"MESSAGE DATA\", message.data);\n    const { generatorFilePath, resultFilePath, result, generatorString } =\n      message.data;\n    console.log(\"generator_result\", result);\n    const name = generatorString.substring(0, generatorString.indexOf(\"(\"));\n\n    const args = generatorString\n      .substring(generatorString.indexOf(\"(\") + 1, generatorString.indexOf(\")\"))\n      .split(\",\");\n\n    logStep(name, args, result, {\n      generatorFilePath`,\n'commandArg030': ()=>`    resultFilePath`,\n'commandArg031': ()=>`  });\n    setTemplate(new Function(\"return \" + result)());\n  };\n\n  function handleGenericMessage(event: MessageEvent) {\n    const message = event.data; // The json data that the extension sent\n    switch (message.command) {\n      case \"file_insert\":\n        if (isMainTemplate) {\n          const { contents, filePath } = message.data;\n          const funcPart = argsAndTemplateToFunction([], contents);\n          const templ = { [filePath]: funcPart };\n          console.log(\"FILE INSERT\", contents, filePath, templ);\n          insertTemplateIntoTemplate(templ);\n        }\n        break;\n    }\n  }\n  useEffect(() => {\n    window.addEventListener(\"message\", handleGenericMessage);\n    return () => {\n      window.removeEventListener(\"message\", handleGenericMessage);\n    };\n  }, [isMainTemplate]);\n  function handleMessage(event: MessageEvent) {\n    if (event.data.data.msgId !== msgId) return;\n    const message = event.data; // The json data that the extension sent\n    switch (message.command) {\n      case \"generator_result\":\n        handleGeneratorResult(message);\n        break;\n    }\n  }\n  useEffect(() => {\n    window.addEventListener(\"message\", handleMessage);\n    return () => {\n      window.removeEventListener(\"message\", handleMessage);\n    };\n  }, [wordSteps]);\n  function applyGeneratorString(generatorString: string) {\n    // form it and send it over\n    const generatorRunFile = formGeneratorFile(\n      generatorString`,\n'commandArg032': ()=>`    template`,\n'commandArg033': ()=>`    templateModule`,\n'commandArg034': ()=>`    generatorModule\n    );\n    // send it over via postMessage\n    postMessage({\n      command: \"run_generator\"`,\n'commandArg035': ()=>`    generatorRunFile`,\n'commandArg036': ()=>`    generatorString`,\n'commandArg037': ()=>`    pathToConfig: CONFIG_PATH`,\n'commandArg038': ()=>`    msgId`,\n'commandArg039': ()=>`  });\n  }\n  console.log(\"Word steps\", wordSteps);\n  return {\n    template`,\n'commandArg040': ()=>`  addKey`,\n'commandArg041': ()=>`  addKeyToNumerator`,\n'commandArg042': ()=>`  insertTemplateIntoTemplate`,\n'commandArg043': ()=>`  insertTemplateIntoTemplateAtKey`,\n'commandArg044': ()=>`  wordSteps`,\n'commandArg045': ()=>`  applyGeneratorString`,\n'commandArg046': ()=>`  removeKey`\n}\n","files":{"generatorFilePath":"/Users/jaykoontz/Documents/GitHub/symmetric-blueprints/src/pools/1733758852255_generator.ts","resultFilePath":"/Users/jaykoontz/Documents/GitHub/symmetric-blueprints/src/pools/1733758852255_result"}}]