[{"result":"{\n\n}"},{"name":"insertIntoTemplate","args":[{},{}],"result":"{\n'f0568b8430_Untitled-1': ()=>`\nimport { genTemplateWithVars, run } from \"symmetric-parser\";\n\nexport const DONT_USE = {\n  \"genTemplate/templName,templateDesc,keys\": ({\n    templName,\n    templateDesc,\n    keys,\n  }) => \\`\nconst ${run(templName, \"templName\")} = genTemplateWithVars({\n  ${run(templateDesc, \"templateDesc\")}},\n  ${run(keys, \"keys\")})\\`,\n};\n\n// read this and then make a template pool from it\nexport const genTempl = genTemplateWithVars(\n  {\n    genTemplate: () => \\`\nconst templName = genTemplateWithVars({\n  templateDesc},\n  keys\n  )\\`,\n  },\n  [\"templName\", \"templateDesc\",\"keys\"]\n);\n\n// but we want these pools namespaced? maybe...maybe not.\n// I'd say not.\nexport const selectorTempl = genTemplateWithVars(\n  {\n    selectorPre: () => \\`\\nselectorName,\\`,\n  },\n  [\"selectorName\"]\n);\n\nexport const selectorFinTempl = genTemplateWithVars(\n  {\n    otherSelector: () => \\`\\nselectorFinName\\`,\n  },\n  [\"selectorFinName\"]\n);\n\nexport const cssDecl = genTemplateWithVars(\n  {\n    cssDecl: () => \\`\\ncssSelectors {\n    cssRules\n  }\\`,\n  },\n  [\"cssSelectors\", \"cssRules\"]\n);\n\nexport const bgRule = genTemplateWithVars(\n  {\n    cssBg: () => \\`background-color: bgValue;\\`,\n  },\n  [\"bgValue\"]\n);\n\n\nexport const random = genTemplateWithVars({\n'random': ()=>\\`some thing here\\`\n}, [\"thing\"]);\nexport const randomParser = genTemplateWithVars({\n'randomParser': ()=>\\`we have so much to parse\\`\n}, [\"so\",\"to\"]);\nexport const firsty = genTemplateWithVars({\n'firsty': ()=>\\`this is the way\\`\n}, [\"the\"]);\nexport const secondy = genTemplateWithVars({\n'secondy': ()=>\\`another one for me\\`\n}, [\"one\"]);\nexport const funcDef = genTemplateWithVars({\n'funcDef': ()=>\\`function name(args) { body }\\`\n}, [\"name\",\"args\",\"body\"]);\nexport const funcDefi = genTemplateWithVars({\n'funcDefi': ()=>\\`export function name(args) {body}\\`\n}, [\"name\",\"args\",\"body\"]);\nexport const arrayDef = genTemplateWithVars({\n'arrayDef': ()=>\\`[arrayElements]\\`\n}, [\"arrayElements\"]);\nexport const arrayEl = genTemplateWithVars({\n'arrayEl': ()=>\\`element\\`\n}, [\"element\"]);\nexport const testOne = genTemplateWithVars({\n'testOne': ()=>\\`test time for me\\`\n}, [\"time\"]);`\n}","files":{}},{"name":"insertIntoTemplate","args":[{},{}],"result":"{\n'f0568b8430_Untitled-1': ()=>`\nimport { genTemplateWithVars, run } from \"symmetric-parser\";\n\nexport const DONT_USE = {\n  \"genTemplate/templName,templateDesc,keys\": ({\n    templName,\n    templateDesc,\n    keys,\n  }) => \\`\nconst ${run(templName, \"templName\")} = genTemplateWithVars({\n  ${run(templateDesc, \"templateDesc\")}},\n  ${run(keys, \"keys\")})\\`,\n};\n\n// read this and then make a template pool from it\nexport const genTempl = genTemplateWithVars(\n  {\n    genTemplate: () => \\`\nconst templName = genTemplateWithVars({\n  templateDesc},\n  keys\n  )\\`,\n  },\n  [\"templName\", \"templateDesc\",\"keys\"]\n);\n\n// but we want these pools namespaced? maybe...maybe not.\n// I'd say not.\nexport const selectorTempl = genTemplateWithVars(\n  {\n    selectorPre: () => \\`\\nselectorName,\\`,\n  },\n  [\"selectorName\"]\n);\n\nexport const selectorFinTempl = genTemplateWithVars(\n  {\n    otherSelector: () => \\`\\nselectorFinName\\`,\n  },\n  [\"selectorFinName\"]\n);\n\nexport const cssDecl = genTemplateWithVars(\n  {\n    cssDecl: () => \\`\\ncssSelectors {\n    cssRules\n  }\\`,\n  },\n  [\"cssSelectors\", \"cssRules\"]\n);\n\nexport const bgRule = genTemplateWithVars(\n  {\n    cssBg: () => \\`background-color: bgValue;\\`,\n  },\n  [\"bgValue\"]\n);\n\n\nexport const random = genTemplateWithVars({\n'random': ()=>\\`some thing here\\`\n}, [\"thing\"]);\nexport const randomParser = genTemplateWithVars({\n'randomParser': ()=>\\`we have so much to parse\\`\n}, [\"so\",\"to\"]);\nexport const firsty = genTemplateWithVars({\n'firsty': ()=>\\`this is the way\\`\n}, [\"the\"]);\nexport const secondy = genTemplateWithVars({\n'secondy': ()=>\\`another one for me\\`\n}, [\"one\"]);\nexport const funcDef = genTemplateWithVars({\n'funcDef': ()=>\\`function name(args) { body }\\`\n}, [\"name\",\"args\",\"body\"]);\nexport const funcDefi = genTemplateWithVars({\n'funcDefi': ()=>\\`export function name(args) {body}\\`\n}, [\"name\",\"args\",\"body\"]);\nexport const arrayDef = genTemplateWithVars({\n'arrayDef': ()=>\\`[arrayElements]\\`\n}, [\"arrayElements\"]);\nexport const arrayEl = genTemplateWithVars({\n'arrayEl': ()=>\\`element\\`\n}, [\"element\"]);\nexport const testOne = genTemplateWithVars({\n'testOne': ()=>\\`test time for me\\`\n}, [\"time\"]);`,\n'fNaN': ()=>`\nimport { genTemplateWithVars, run } from \"symmetric-parser\";\n\n// read this and then make a template pool from it\nexport const genTempl = genTemplateWithVars(\n  {\n    genTemplate: () => \\`\nconst templName = genTemplateWithVars({\n  templateDesc},\n  keys\n  )\\`,\n  },\n  [\"templName\", \"templateDesc\",\"keys\"]\n);\n\n// but we want these pools namespaced? maybe...maybe not.\n// I'd say not.\nexport const selectorTempl = genTemplateWithVars(\n  {\n    selectorPre: () => \\`\\nselectorName,\\`,\n  },\n  [\"selectorName\"]\n);\n\nexport const selectorFinTempl = genTemplateWithVars(\n  {\n    otherSelector: () => \\`\\nselectorFinName\\`,\n  },\n  [\"selectorFinName\"]\n);\n\nexport const cssDecl = genTemplateWithVars(\n  {\n    cssDecl: () => \\`\\ncssSelectors {\n    cssRules\n  }\\`,\n  },\n  [\"cssSelectors\", \"cssRules\"]\n);\n\nexport const bgRule = genTemplateWithVars(\n  {\n    cssBg: () => \\`background-color: bgValue;\\`,\n  },\n  [\"bgValue\"]\n);\n\n\nexport const random = genTemplateWithVars({\n'random': ()=>\\`some thing here\\`\n}, [\"thing\"]);\nexport const randomParser = genTemplateWithVars({\n'randomParser': ()=>\\`we have so much to parse\\`\n}, [\"so\",\"to\"]);\nexport const firsty = genTemplateWithVars({\n'firsty': ()=>\\`this is the way\\`\n}, [\"the\"]);\nexport const secondy = genTemplateWithVars({\n'secondy': ()=>\\`another one for me\\`\n}, [\"one\"]);\nexport const funcDef = genTemplateWithVars({\n'funcDef': ()=>\\`function name(args) { body }\\`\n}, [\"name\",\"args\",\"body\"]);\nexport const funcDefi = genTemplateWithVars({\n'funcDefi': ()=>\\`export function name(args) {body}\\`\n}, [\"name\",\"args\",\"body\"]);\nexport const arrayDef = genTemplateWithVars({\n'arrayDef': ()=>\\`[arrayElements]\\`\n}, [\"arrayElements\"]);\nexport const arrayEl = genTemplateWithVars({\n'arrayEl': ()=>\\`element\\`\n}, [\"element\"]);\nexport const testOne = genTemplateWithVars({\n'testOne': ()=>\\`test time for me\\`\n}, [\"time\"]);`\n}","files":{}},{"name":"deleteKey","args":["f0568b8430_Untitled-1"],"result":"{\n'fNaN': ()=>`\nimport { genTemplateWithVars, run } from \"symmetric-parser\";\n\n// read this and then make a template pool from it\nexport const genTempl = genTemplateWithVars(\n  {\n    genTemplate: () => \\`\nconst templName = genTemplateWithVars({\n  templateDesc},\n  keys\n  )\\`,\n  },\n  [\"templName\", \"templateDesc\",\"keys\"]\n);\n\n// but we want these pools namespaced? maybe...maybe not.\n// I'd say not.\nexport const selectorTempl = genTemplateWithVars(\n  {\n    selectorPre: () => \\`\\nselectorName,\\`,\n  },\n  [\"selectorName\"]\n);\n\nexport const selectorFinTempl = genTemplateWithVars(\n  {\n    otherSelector: () => \\`\\nselectorFinName\\`,\n  },\n  [\"selectorFinName\"]\n);\n\nexport const cssDecl = genTemplateWithVars(\n  {\n    cssDecl: () => \\`\\ncssSelectors {\n    cssRules\n  }\\`,\n  },\n  [\"cssSelectors\", \"cssRules\"]\n);\n\nexport const bgRule = genTemplateWithVars(\n  {\n    cssBg: () => \\`background-color: bgValue;\\`,\n  },\n  [\"bgValue\"]\n);\n\n\nexport const random = genTemplateWithVars({\n'random': ()=>\\`some thing here\\`\n}, [\"thing\"]);\nexport const randomParser = genTemplateWithVars({\n'randomParser': ()=>\\`we have so much to parse\\`\n}, [\"so\",\"to\"]);\nexport const firsty = genTemplateWithVars({\n'firsty': ()=>\\`this is the way\\`\n}, [\"the\"]);\nexport const secondy = genTemplateWithVars({\n'secondy': ()=>\\`another one for me\\`\n}, [\"one\"]);\nexport const funcDef = genTemplateWithVars({\n'funcDef': ()=>\\`function name(args) { body }\\`\n}, [\"name\",\"args\",\"body\"]);\nexport const funcDefi = genTemplateWithVars({\n'funcDefi': ()=>\\`export function name(args) {body}\\`\n}, [\"name\",\"args\",\"body\"]);\nexport const arrayDef = genTemplateWithVars({\n'arrayDef': ()=>\\`[arrayElements]\\`\n}, [\"arrayElements\"]);\nexport const arrayEl = genTemplateWithVars({\n'arrayEl': ()=>\\`element\\`\n}, [\"element\"]);\nexport const testOne = genTemplateWithVars({\n'testOne': ()=>\\`test time for me\\`\n}, [\"time\"]);`\n}","files":{}},{"name":"deleteKey","args":["fNaN"],"result":"{\n\n}","files":{}},{"name":"insertIntoTemplate","args":[{},{}],"result":"{\n'55bcd3d8a4_Untitled-1.ts': ()=>`\nimport { genTemplateWithVars, run } from \"symmetric-parser\";\n\n// read this and then make a template pool from it\nexport const genTempl = genTemplateWithVars(\n  {\n    genTemplate: () => \\`\nconst templName = genTemplateWithVars({\n  templateDesc},\n  keys\n  )\\`,\n  },\n  [\"templName\", \"templateDesc\",\"keys\"]\n);\n\n// but we want these pools namespaced? maybe...maybe not.\n// I'd say not.\nexport const selectorTempl = genTemplateWithVars(\n  {\n    selectorPre: () => \\`\\nselectorName,\\`,\n  },\n  [\"selectorName\"]\n);\n\nexport const selectorFinTempl = genTemplateWithVars(\n  {\n    otherSelector: () => \\`\\nselectorFinName\\`,\n  },\n  [\"selectorFinName\"]\n);\n\nexport const cssDecl = genTemplateWithVars(\n  {\n    cssDecl: () => \\`\\ncssSelectors {\n    cssRules\n  }\\`,\n  },\n  [\"cssSelectors\", \"cssRules\"]\n);\n\nexport const bgRule = genTemplateWithVars(\n  {\n    cssBg: () => \\`background-color: bgValue;\\`,\n  },\n  [\"bgValue\"]\n);\n\n\nexport const random = genTemplateWithVars({\n'random': ()=>\\`some thing here\\`\n}, [\"thing\"]);\nexport const randomParser = genTemplateWithVars({\n'randomParser': ()=>\\`we have so much to parse\\`\n}, [\"so\",\"to\"]);\nexport const firsty = genTemplateWithVars({\n'firsty': ()=>\\`this is the way\\`\n}, [\"the\"]);\nexport const secondy = genTemplateWithVars({\n'secondy': ()=>\\`another one for me\\`\n}, [\"one\"]);\nexport const funcDef = genTemplateWithVars({\n'funcDef': ()=>\\`function name(args) { body }\\`\n}, [\"name\",\"args\",\"body\"]);\nexport const funcDefi = genTemplateWithVars({\n'funcDefi': ()=>\\`export function name(args) {body}\\`\n}, [\"name\",\"args\",\"body\"]);\nexport const arrayDef = genTemplateWithVars({\n'arrayDef': ()=>\\`[arrayElements]\\`\n}, [\"arrayElements\"]);\nexport const arrayEl = genTemplateWithVars({\n'arrayEl': ()=>\\`element\\`\n}, [\"element\"]);\nexport const testOne = genTemplateWithVars({\n'testOne': ()=>\\`test time for me\\`\n}, [\"time\"]);`\n}","files":{}},{"name":"orderedParse","args":["template"," [genTempl]"],"result":"{\n'genTemplate01/templName01,templateDesc01,keys01': ({templName01, templateDesc01, keys01})=>`\nconst ${run(templName01,'templName01')} = genTemplateWithVars({\n  ${run(templateDesc01,'templateDesc01')}},\n  ${run(keys01,'keys01')}\n  )`,\n'55bcd3d8a4_Untitled-1.ts/genTemplate01': ({genTemplate01})=>`\nimport { genTemplateWithVars, run } from \"symmetric-parser\";\n\n// read this and then make a template pool from it\nexport const genTempl = genTemplateWithVars(\n  {\n    genTemplate: () => \\`${run(genTemplate01, 'genTemplate01')}\\`,\n  },\n  [\"templName\", \"templateDesc\",\"keys\"]\n);\n\n// but we want these pools namespaced? maybe...maybe not.\n// I'd say not.\nexport const selectorTempl = genTemplateWithVars(\n  {\n    selectorPre: () => \\`\nselectorName,\\`,\n  },\n  [\"selectorName\"]\n);\n\nexport const selectorFinTempl = genTemplateWithVars(\n  {\n    otherSelector: () => \\`\nselectorFinName\\`,\n  },\n  [\"selectorFinName\"]\n);\n\nexport const cssDecl = genTemplateWithVars(\n  {\n    cssDecl: () => \\`\ncssSelectors {\n    cssRules\n  }\\`,\n  },\n  [\"cssSelectors\", \"cssRules\"]\n);\n\nexport const bgRule = genTemplateWithVars(\n  {\n    cssBg: () => \\`background-color: bgValue;\\`,\n  },\n  [\"bgValue\"]\n);\n\n\nexport const random = genTemplateWithVars({\n'random': ()=>\\`some thing here\\`\n}, [\"thing\"]);\nexport const randomParser = genTemplateWithVars({\n'randomParser': ()=>\\`we have so much to parse\\`\n}, [\"so\",\"to\"]);\nexport const firsty = genTemplateWithVars({\n'firsty': ()=>\\`this is the way\\`\n}, [\"the\"]);\nexport const secondy = genTemplateWithVars({\n'secondy': ()=>\\`another one for me\\`\n}, [\"one\"]);\nexport const funcDef = genTemplateWithVars({\n'funcDef': ()=>\\`function name(args) { body }\\`\n}, [\"name\",\"args\",\"body\"]);\nexport const funcDefi = genTemplateWithVars({\n'funcDefi': ()=>\\`export function name(args) {body}\\`\n}, [\"name\",\"args\",\"body\"]);\nexport const arrayDef = genTemplateWithVars({\n'arrayDef': ()=>\\`[arrayElements]\\`\n}, [\"arrayElements\"]);\nexport const arrayEl = genTemplateWithVars({\n'arrayEl': ()=>\\`element\\`\n}, [\"element\"]);\nexport const testOne = genTemplateWithVars({\n'testOne': ()=>\\`test time for me\\`\n}, [\"time\"]);`,\n'keys01': ()=>`keys`,\n'templName01': ()=>`templName`,\n'templateDesc01': ()=>`templateDesc`\n}\n","files":{"generatorFilePath":"/Users/jaykoontz/Documents/GitHub/symmetric-blueprints/src/pools/1733087361491_generator.ts","resultFilePath":"/Users/jaykoontz/Documents/GitHub/symmetric-blueprints/src/pools/1733087361491_result"}},{"name":"orderedParse","args":["template"," [genTempl]"],"result":"{\n'55bcd3d8a4_Untitled-1.ts/genTemplate01': ({ genTemplate01 }) => `\nimport { genTemplateWithVars, run } from \"symmetric-parser\";\n\n// read this and then make a template pool from it\nexport const genTempl = genTemplateWithVars(\n  {\n    genTemplate: () => \\`${run(genTemplate01, \"genTemplate01\")}\\`,\n  },\n  [\"templName\", \"templateDesc\",\"keys\"]\n);\n\n// but we want these pools namespaced? maybe...maybe not.\n// I'd say not.\nexport const selectorTempl = genTemplateWithVars(\n  {\n    selectorPre: () => \\`\nselectorName,\\`,\n  },\n  [\"selectorName\"]\n);\n\nexport const selectorFinTempl = genTemplateWithVars(\n  {\n    otherSelector: () => \\`\nselectorFinName\\`,\n  },\n  [\"selectorFinName\"]\n);\n\nexport const cssDecl = genTemplateWithVars(\n  {\n    cssDecl: () => \\`\ncssSelectors {\n    cssRules\n  }\\`,\n  },\n  [\"cssSelectors\", \"cssRules\"]\n);\n\nexport const bgRule = genTemplateWithVars(\n  {\n    cssBg: () => \\`background-color: bgValue;\\`,\n  },\n  [\"bgValue\"]\n);\n\n\nexport const random = genTemplateWithVars({\n'random': ()=>\\`some thing here\\`\n}, [\"thing\"]);\nexport const randomParser = genTemplateWithVars({\n'randomParser': ()=>\\`we have so much to parse\\`\n}, [\"so\",\"to\"]);\nexport const firsty = genTemplateWithVars({\n'firsty': ()=>\\`this is the way\\`\n}, [\"the\"]);\nexport const secondy = genTemplateWithVars({\n'secondy': ()=>\\`another one for me\\`\n}, [\"one\"]);\nexport const funcDef = genTemplateWithVars({\n'funcDef': ()=>\\`function name(args) { body }\\`\n}, [\"name\",\"args\",\"body\"]);\nexport const funcDefi = genTemplateWithVars({\n'funcDefi': ()=>\\`export function name(args) {body}\\`\n}, [\"name\",\"args\",\"body\"]);\nexport const arrayDef = genTemplateWithVars({\n'arrayDef': ()=>\\`[arrayElements]\\`\n}, [\"arrayElements\"]);\nexport const arrayEl = genTemplateWithVars({\n'arrayEl': ()=>\\`element\\`\n}, [\"element\"]);\nexport const testOne = genTemplateWithVars({\n'testOne': ()=>\\`test time for me\\`\n}, [\"time\"]);`,\n'genTemplate01/templName01,templateDesc01,keys01': ({templName01, templateDesc01, keys01})=>`\nconst ${run(templName01,'templName01')} = genTemplateWithVars({\n  ${run(templateDesc01,'templateDesc01')}},\n  ${run(keys01,'keys01')}\n  )`,\n'keys01': () => \"keys\",\n'templName01': () => \"templName\",\n'templateDesc01': () => \"templateDesc\"\n}\n","files":{"generatorFilePath":"/Users/jaykoontz/Documents/GitHub/symmetric-blueprints/src/pools/1733087374815_generator.ts","resultFilePath":"/Users/jaykoontz/Documents/GitHub/symmetric-blueprints/src/pools/1733087374815_result"}}]