[{"result":"{\n\n}"},{"name":"insertIntoTemplate","args":[{},{}],"full":"insertIntoTemplate([object Object],[object Object])","result":"{\n'panel.tsb779abdb70': ()=>`import * as vscode from \"vscode\";\nimport { getNonce } from \"./getNonce\";\nimport * as fs from \"fs\";\nimport { readFile, runIndexFile, runTs, saveFile, saveWord } from \"./compiler\";\nimport {\n  argsAndTemplateToFunction,\n  genTemplateWithVars,\n  insertIntoTemplate,\n  tts,\n} from \"symmetric-parser\";\nimport { Template } from \"symmetric-parser/dist/src/templator/template-group\";\nimport {\n  getAllWordPathsByLastModified,\n  getWordContents,\n  getWordNamesFromWordPaths,\n  sortFilesByLastModified,\n  readFromConfig,\n  getWordPath,\n  storeFileHash,\n  getFilePathHashes,\n  getFilePathFromHashes,\n  overwriteFile,\n  getAllFileTemplates,\n  saveRunnableWord,\n  getAllRunnableWords,\n  createRunnableGeneratorFileContents,\n} from \"./commandService\";\nimport { sha1 } from \"js-sha1\";\nimport { formWordRunFile } from \"./wordRunService\";\n\nfunction formFilePathHash(filePath: string) {\n  const fileName = filePath.split(\"/\").pop();\n  const fileHash = sha1(filePath);\n  return \\`${fileHash.substring(0, 10)}_${fileName}\\`;\n}\n\nfunction readFromFile(file) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(file, \"utf8\", function (err, data) {\n      if (err) {\n        console.log(err);\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n\nexport default class PanelClass {\n  public static currentPanel: PanelClass | undefined;\n\n  private static readonly viewType = \"PanelName\";\n\n  private readonly _panel: vscode.WebviewPanel;\n  private readonly _extensionUri: vscode.Uri;\n  private readonly _extContext: vscode.ExtensionContext;\n  private _disposables: vscode.Disposable[] = [];\n  private pathToConfig: string;\n\n  public static createOrShow(extContext: vscode.ExtensionContext) {\n    const column = vscode.window.activeTextEditor\n      ? vscode.window.activeTextEditor.viewColumn\n      : undefined;\n\n    // If we already have a panel, show it.\n    // Otherwise, create a new panel.\n    if (PanelClass.currentPanel) {\n      PanelClass.currentPanel._panel.reveal(column);\n    } else {\n      // ReactPanel.currentPanel = new ReactPanel(extensionPath, column || vscode.ViewColumn.One);\n      PanelClass.currentPanel = new PanelClass(\n        extContext,\n        vscode.ViewColumn.Two\n      );\n    }\n  }\n\n  public static async insertFileIntoTemplate(\n    extContext: vscode.ExtensionContext\n  ) {\n    const activeTextEditor = vscode.window.activeTextEditor;\n    if (activeTextEditor == null) {\n      return;\n    }\n    const activeEditorText = activeTextEditor.document.getText();\n    const activeEditorFilePath = activeTextEditor.document.fileName;\n    // we want to deterministically hash the filepath\n\n    const filePathHash = formFilePathHash(activeEditorFilePath);\n    const column = vscode.window.activeTextEditor\n      ? vscode.window.activeTextEditor.viewColumn\n      : undefined;\n\n    // If we already have a panel, show it.\n    // Otherwise, create a new panel.\n    if (PanelClass.currentPanel) {\n      PanelClass.currentPanel._panel.reveal(column);\n    } else {\n      // ReactPanel.currentPanel = new ReactPanel(extensionPath, column || vscode.ViewColumn.One);\n      PanelClass.currentPanel = new PanelClass(\n        extContext,\n        vscode.ViewColumn.Two\n      );\n    }\n\n    // we also need to store this hash somewhere!\n    console.log(\"DO WE HAVE PATH \", PanelClass.currentPanel.pathToConfig);\n    storeFileHash(\n      PanelClass.currentPanel.pathToConfig,\n      filePathHash,\n      activeEditorFilePath\n    );\n\n    /*PanelClass.currentPanel._panel.webview.postMessage({\n      command: \"file_insert\",\n      data: {\n        contents: activeEditorText,\n        filePath: filePathHash,\n      },\n    });*/\n    const fileTemplates = await getAllFileTemplates(\n      PanelClass.currentPanel.pathToConfig\n    );\n    PanelClass.currentPanel._panel.webview.postMessage({\n      command: \"all_file_templates\",\n      data: {\n        fileTemplates: tts(fileTemplates, false),\n      },\n    });\n  }\n  //temporarily setting extcontext to any type\n  private constructor(\n    _extContext: vscode.ExtensionContext,\n    column: vscode.ViewColumn\n  ) {\n    this._extContext = _extContext;\n    this._extensionUri = _extContext.extensionUri;\n\n    // Create and show a new webview panel\n    this._panel = vscode.window.createWebviewPanel(\n      PanelClass.viewType,\n      \"Blueprints\",\n      column,\n      {\n        // Enable javascript in the webview\n        enableScripts: true,\n        localResourceRoots: [this._extensionUri],\n      }\n    );\n\n    // Set the webview's initial html content\n    this._panel.webview.html = this._getHtmlForWebview(this._panel.webview);\n\n    // Listen for when the panel is disposed\n    // This happens when the user closes the panel or when the panel is closed programatically\n    this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\n\n    //Listen to messages\n    this._panel.webview.onDidReceiveMessage(\n      async (msg: any) => {\n        console.log(\"DID RECEIVE MSG\", msg);\n        switch (msg.command) {\n          case \"set_config_path\": {\n            const { pathToConfig } = msg;\n            console.log(\"SET CONFIG PATH\", pathToConfig);\n            this.pathToConfig = pathToConfig;\n          }\n          case \"save_all_files\": {\n            const { template, pathToConfig } = msg;\n\n            const templ = new Function(\"return \" + template)();\n            // we expect a compiled template here, so no denoms for anything, or an error if so\n            const templFileKeys = Object.keys(templ).filter(\n              (k) => k.indexOf(\".\") > -1\n            );\n            //console.log(\"TEMPL FILE KEYS\", templFileKeys);\n            const filePathHashes = await getFilePathHashes(pathToConfig);\n            //console.log(\"FILE PATH HASHES\", filePathHashes);\n            for (const filePathHash of templFileKeys) {\n              //console.log(\"filepathhash\", filePathHash);\n              // we expect a compiled template here, so no denoms for anything, or an error if so\n              const filePath = filePathHashes[filePathHash];\n              //console.log(\"FILE PATH\", filePath);\n              const fileContents = templ[filePathHash]();\n              //console.log(\"writing file\", filePath, \"\\n<>CONTENTS<>\\n\",fileContents);\n              await overwriteFile(filePath, fileContents);\n            }\n\n            break;\n          }\n          case \"startup\":\n            console.log(\"message received\");\n            // ensure bun is set up for the thing\n\n            break;\n          case \"testing\":\n            console.log(\"reachedBrain\");\n            this._panel!.webview.postMessage({ command: \"refactor\" });\n            break;\n          case \"build_project\":\n            break;\n          case \"save_word\": {\n            const { word, pathToConfig } = msg;\n            const wordsFile = await readFromConfig(\"WORDS_FILE\", pathToConfig);\n            // save to word file\n            const result = await saveWord(word, wordsFile);\n            break;\n          }\n          case \"store_runnable_word\": {\n            const { word, pathToConfig } = msg;\n            console.log(\"STORING RUNNABLE WORD\", word, pathToConfig);\n            try {\n              await saveRunnableWord(pathToConfig, word);\n              const runnableWords = await getAllRunnableWords(pathToConfig);\n              this._panel!.webview.postMessage({\n                command: \"all_runnable_words\",\n                data: {\n                  runnableWords: JSON.stringify(runnableWords),\n                },\n              });\n            } catch (e) {\n              console.error(e);\n            }\n            break;\n          }\n          case \"get_word\": {\n            const { wordName, pathToConfig } = msg;\n            const wordPath = await getWordPath(pathToConfig, wordName);\n            const wordContents = await getWordContents(wordPath);\n            this._panel!.webview.postMessage({\n              command: \"word_contents\",\n              data: {\n                wordName,\n                wordContents,\n              },\n            });\n            break;\n          }\n          case \"create_word\": {\n            const { wordName, pathToConfig, template } = msg;\n            const projectDir = await readFromConfig(\n              \"PROJECT_DIR\",\n              pathToConfig\n            );\n            const wordFile = projectDir + \"/word_\" + wordName + \".json\";\n            // eventually, result might be something more, like a file insertion\n            let wordTemplate = \"{}\";\n            if (template != null) {\n              wordTemplate = template;\n            }\n            let wordContents = JSON.stringify([{ result: wordTemplate }]);\n            await saveFile(wordFile, wordContents);\n            this._panel!.webview.postMessage({\n              command: \"word_contents\",\n              data: {\n                wordName,\n                wordContents,\n              },\n            });\n            break;\n          }\n          case \"add_full_template\": {\n            // a full template doesn't need to be generated\n            // it's the actual object that is a template\n            // we just need to add it to the template pool\n            const {template, name, pathToConfig} = msg;\n            const templatesFilePath = await readFromConfig(\n              \"TEMPLATE_FILE\",\n              pathToConfig\n            );\n            const templatesFile = await readFromFile(templatesFilePath);\n            console.log(\"CURR TEMPLATES FILE\", templatesFile);\n            // write template to templates file\n            const newTemplatesFile =\n              templatesFile + \"\\n\" + \\`export const ${name} = ${template}\\`;\n            console.log(\"NEW TEMPLATES FILE\", newTemplatesFile);\n            fs.writeFile(templatesFilePath, newTemplatesFile, (err) => {\n              if (err) {\n                console.error(err);\n              }\n              console.log(\"success\");\n            });\n\n            // bun run the file and send the result to the frontend\n            const projectDir = await readFromConfig(\n              \"PROJECT_DIR\",\n              pathToConfig\n            );\n            const templateModule = await runTs(\n              projectDir + \"/template-getter.ts\"\n            );\n            console.log(\"ALL OF TEMPLATE MODULE\", templateModule)\n            this._panel!.webview.postMessage({\n              command: \"all_templates\",\n              data: {\n                templateModule,\n              },\n            });\n            break;\n          }\n          case \"add_template\": {\n            const { key, args, value, pathToConfig } = msg;\n            const funcPart = argsAndTemplateToFunction([], value);\n            const templ = { [key]: funcPart };\n            const templateString = \\`genTemplateWithVars(${tts(\n              templ,\n              false\n            )}, ${args});\\`;\n            const templatesFilePath = await readFromConfig(\n              \"TEMPLATE_FILE\",\n              pathToConfig\n            );\n            const templatesFile = await readFromFile(templatesFilePath);\n            console.log(\"CURR TEMPLATES FILE\", templatesFile);\n            // write template to templates file\n            const newTemplatesFile =\n              templatesFile + \"\\n\" + \\`export const ${key} = ${templateString}\\`;\n            console.log(\"NEW TEMPLATES FILE\", newTemplatesFile);\n            fs.writeFile(templatesFilePath, newTemplatesFile, (err) => {\n              if (err) {\n                console.error(err);\n              }\n              console.log(\"success\");\n            });\n\n            // bun run the file and send the result to the frontend\n            const projectDir = await readFromConfig(\n              \"PROJECT_DIR\",\n              pathToConfig\n            );\n            const templateModule = await runTs(\n              projectDir + \"/template-getter.ts\"\n            );\n            this._panel!.webview.postMessage({\n              command: \"all_templates\",\n              data: {\n                templateModule,\n              },\n            });\n\n            break;\n          }\n          case \"run_generator\": {\n            const { generatorString, template, pathToConfig, msgId } = msg;\n            console.log(\n              \"RUNNING\",\n              \"msgId\",\n              msgId,\n              \"AND\",\n\n              generatorString,\n              pathToConfig\n            );\n            const projectDir = await readFromConfig(\n              \"PROJECT_DIR\",\n              pathToConfig\n            );\n            const filePrefix = Date.now();\n            const generatorRunFile = await createRunnableGeneratorFileContents(\n              pathToConfig,\n              generatorString,\n              template\n            );\n            const generatorFile = filePrefix + \"_generator.ts\";\n            const resultFile = filePrefix + \"_result\";\n            const genFilePath = projectDir + \"/\" + generatorFile;\n            const resultFilePath = projectDir + \"/\" + resultFile;\n            await saveFile(genFilePath, generatorRunFile);\n            const result = await runTs(genFilePath);\n            console.log(\"RESULTv,\", result);\n            await saveFile(resultFilePath, result);\n\n            this._panel!.webview.postMessage({\n              command: \"generator_result\",\n              data: {\n                msgId,\n                generatorFilePath: genFilePath,\n                resultFilePath: resultFilePath,\n                result,\n                generatorString,\n              },\n            });\n            break;\n          }\n          case \"run_word\": {\n            const { wordName, template, pathToConfig, msgId } = msg;\n            const projectDir = await readFromConfig(\n              \"PROJECT_DIR\",\n              pathToConfig\n            );\n            const filePrefix = Date.now();\n            const wordRunFile = formWordRunFile(wordName, template);\n            const wordRunFileName = filePrefix + \"_wordRun.ts\";\n            const resultFile = filePrefix + \"_result\";\n            const wordRunFilePath = projectDir + \"/\" + wordRunFileName;\n            const resultFilePath = projectDir + \"/\" + resultFile;\n            await saveFile(wordRunFilePath, wordRunFile);\n            const result = await runTs(wordRunFilePath);\n            console.log(\"word run RESULTv,\", result);\n            await saveFile(resultFilePath, result);\n\n            this._panel!.webview.postMessage({\n              command: \"word_run_result\",\n              data: {\n                msgId,\n                wordRunFilePath: wordRunFilePath,\n                resultFilePath: resultFilePath,\n                result,\n                wordString: \\`${wordName}(template)\\`,\n              },\n            });\n            break;\n          }\n          case \"add_filled_generator\": {\n            const { msgId, filledGenerator, pathToConfig } = msg;\n\n            const projectDir = await readFromConfig(\n              \"PROJECT_DIR\",\n              pathToConfig\n            );\n            const filledGeneratorsPath = projectDir + \"/filledGenerators.json\";\n\n            let currentFilledGenerators;\n            try {\n              currentFilledGenerators = await readFile(filledGeneratorsPath);\n            } catch {\n              currentFilledGenerators = \"{}\";\n            }\n            const cfgTemplate: Template = new Function(\n              \"return \" + currentFilledGenerators\n            )();\n            const filledGeneratorTemplate: Template = new Function(\n              \"return \" + filledGenerator\n            )();\n            const newFilledGenerators = insertIntoTemplate(\n              cfgTemplate,\n              filledGeneratorTemplate\n            );\n            await saveFile(\n              filledGeneratorsPath,\n              tts(newFilledGenerators, false)\n            );\n            this._panel!.webview.postMessage({\n              command: \"all_filled_generators\",\n              data: {\n                msgId,\n                allFilledGenerators: tts(newFilledGenerators, false),\n              },\n            });\n            break;\n          }\n          case \"save_word_steps\": {\n            const { wordSteps, wordName, pathToConfig, msgId } = msg;\n            if (\n              wordSteps.length === 0 ||\n              wordSteps === \"\" ||\n              wordSteps == null\n            ) {\n              throw new Error(\"No steps to save\");\n              break;\n            }\n            const projectDir = await readFromConfig(\n              \"PROJECT_DIR\",\n              pathToConfig\n            );\n            const wordFile = projectDir + \"/word_\" + wordName + \".json\";\n            await saveFile(wordFile, wordSteps);\n            this._panel!.webview.postMessage({\n              command: \"word_saved\",\n              data: {\n                msgId,\n              },\n            });\n            break;\n          }\n          case \"fetch_from_config\":\n            try {\n              const { pathToConfig } = msg;\n\n              // data will equal:\n              // GENERATOR_FILE=src/generators/wordBuilder.ts\n              // TEMPLATE_FILE=src/templates/wordBuilder.ts\n              // WORDS_FILE=src/words/wordBuilder.ts\n              // we want to parse each file path and send it back to the webview\n\n              const generatorPath = await readFromConfig(\n                \"GENERATOR_FILE\",\n                pathToConfig\n              );\n\n              const templatePath = await readFromConfig(\n                \"TEMPLATE_FILE\",\n                pathToConfig\n              );\n              const runnableWords = await getAllRunnableWords(pathToConfig);\n              const projectDir = await readFromConfig(\n                \"PROJECT_DIR\",\n                pathToConfig\n              );\n              const filledGeneratorsPath =\n                projectDir + \"/filledGenerators.json\";\n              const allWordPaths = await getAllWordPathsByLastModified(\n                pathToConfig\n              );\n              const sortedWordPaths = await sortFilesByLastModified(\n                allWordPaths\n              );\n\n              const templateModule = await runTs(\n                projectDir + \"/template-getter.ts\"\n              );\n\n              const promises = [\n                readFromFile(generatorPath),\n                readFromFile(templatePath),\n                readFromFile(filledGeneratorsPath),\n                getWordContents(sortedWordPaths[0]),\n              ];\n              const fileTemplates = await getAllFileTemplates(\n                PanelClass.currentPanel.pathToConfig\n              );\nconsole.log(\"FROM STARTUP TEMPLATE MODEUL\", templateModule)\n              const wordNames = getWordNamesFromWordPaths(allWordPaths);\n              const currentWordName = sortedWordPaths[0]\n                .split(\"_\")[1]\n                .replace(\".json\", \"\");\n              Promise.all(promises).then((data) => {\n                const [generators, templates, filledGenerators, currentWord] =\n                  data;\n                this._panel!.webview.postMessage({\n                  command: \"config_data\",\n                  data: {\n                    generators,\n                    templates,\n                    filledGenerators,\n                    currentWord,\n                    currentWordName,\n                    wordNames: JSON.stringify(wordNames),\n                    templateModule,\n                    fileTemplates: tts(fileTemplates, false),\n                    runnableWords: JSON.stringify(runnableWords),\n                  },\n                });\n              });\n\n              //this._panel!.webview.postMessage({ command: 'config_data', data });\n            } catch (e) {\n              console.error(e);\n            }\n            break;\n        }\n      },\n      null,\n      this._disposables\n    );\n  }\n\n  public dispose() {\n    PanelClass.currentPanel = undefined;\n    this._panel.dispose();\n    while (this._disposables.length) {\n      const x = this._disposables.pop();\n      if (x) {\n        x.dispose();\n      }\n    }\n  }\n\n  private _getHtmlForWebview(webview: vscode.Webview) {\n    const scriptUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"out\", \"main.wv.js\")\n    );\n\n    const styleUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"styles.css\")\n    );\n\n    const nonce = getNonce();\n\n    return \\`<!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Symmetric Blueprints</title>\n        <link rel=\"stylesheet\" href=\"${styleUri}\">\n      </head>\n      <body>\n        <div id=\"root\"></div>\n        <script>\n          global = window\n          \n          const vscode = acquireVsCodeApi();\n          window.onload = function() {\n            vscode.postMessage({ command: 'startup' });\n            console.log('HTML started up.');\n          };\n        </script>\n        <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n      </body>\n      </html>\n    \\`;\n  }\n}\n`\n}","files":{}}]