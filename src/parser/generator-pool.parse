import _, { isEmpty } from "lodash";
const { cloneDeep, flatten } = _;
import {
  applyToIndex,
  changeTemplateArgs,
  FoldMode,
  getDenominators,
  getKeyDenominators,
  orderedFold,
  recursiveFold,
} from "./parser";
import {
  Template,
  argsAndTemplateToFunction,
  combine,
  gatherRunStatements,
  multiply,
} from "./template-group";
import { getKeyName, rs, tts } from "./utility";
import {
  cleanIndexingFromKeys,
  findMatchingKeysForGenericTemplate,
  getAllKeysWithNumeratorString,
  getDescendentsOfKey,
  getParentOfKey,
  getSiblingValue,
  getTemplatesFromKeys,
  makeKeyGeneric,
} from "./tree-util";

type MapOnto = {
  froms: string[];
  onto: Template;
};

// when you have a lot of the same template, it shows like:
// key1, key2, key3, keyN.
// we want to map a template onto all of these but don't wannt
// address the keys this way.
// so whatever you pass as "onto" will take key1..n, and map it onto
// the template.
// the result is a template that will take in all the key1..n because it's been
// reproduced to match the number of keys.
// so if it's mapping on {a:({b})=>`${b}`}, and the templates is `{b1:..., b2:...}
// the result is {a1:({b1})=>`${b1}`, a2:({b2})=>`${b2}`}
export function applyManyToGeneric(
  templates: Template,
  mapOnto: MapOnto
): Template {
  console.log(
    "applyManyToGeneric",
    tts(templates),
    tts(mapOnto.onto),
    mapOnto.froms
  );
  const fromKeyPairs: { [keyIndex: string]: Array<string> } = {};
  let finalTemplate: Template = {};
  // on each key, we want to map the onto onto the key.
  Object.keys(templates).forEach((key) => {
    const keyName = key.split(/[0-9]/)[0];
    const keyIndex = key.substring(key.search(/[0-9]/));
    if (mapOnto.froms.includes(keyName)) {
      if (!Array.isArray(fromKeyPairs[keyIndex])) {
        fromKeyPairs[keyIndex] = [];
      }
      fromKeyPairs[keyIndex].push(key);
    }
  });
  console.log("appMany FROM KEY PAIRS", fromKeyPairs);

  Object.keys(fromKeyPairs).forEach((keyIndex, i) => {
    const keyNames = fromKeyPairs[keyIndex];
    const keyNameMap = keyNames.reduce((acc, keyName) => {
      acc = Object.assign(acc, { [keyName.split(/[0-9]/)[0]]: keyName });
      return acc;
    }, {});
    // take the keyNameMap and use it to change the args
    console.log("appMany KEYNAMEMAP", keyNameMap);
    console.log("appMany ONTO", tts(mapOnto.onto, false));
    // note we're giving it the same keyIndex it had. makes conversions easier. OR DOES IT BREAK THINGS??
    const result = changeTemplateArgs(mapOnto.onto, keyNameMap, keyIndex);
    console.log("appMany RESULT", tts(result, false));
    finalTemplate = combine(finalTemplate, result);
  });
  return finalTemplate;
  /*
  // assume fromKeys aligns on index
  console.log("FROM KEYS", fromKeys, mapOnto, Object.keys(templates));
  const reduced = fromKeys.reduce(
    (acc: Template, fromKey: string, i: number) => {
      const key = fromKey.split(/[0-9]/)[0];

      acc = changeTemplateArgs(acc, { [key]: fromKey }, i);

      console.log("NEW ONTO", acc, tts(acc));
      return acc;
    },
    mapOnto.onto
  );
  console.log("ontoGetter", tts(reduced));
  return reduced;
  */
}

type MapArg = {
  from: string;
  to: string;
  index?: string | number;
};
// change the keys from "from" to "to". very simple, that's it.
// used when you want to change the names of keys.
export function mapper(templates: Template, map: MapArg): Template {
  const fromKeys = Object.keys(templates).filter((key) => {
    const keyName = key.split(/[0-9]/)[0];

    return keyName === map.from;
  });
  //  console.log("MAPPER FROM KEYS", fromKeys, map, Object.keys(templates));
  const reduced = fromKeys.reduce(
    (acc: Template, fromKey: string, i: number) => {
      // notes continued on Obsidian
      // obsidian://open?vault=All&file=HGCG%20reducer%20templates%20for%20creating%20sections%20of%20template%20types
      const newIdentifier = `${i}m${map.index}`;
      acc = { ...acc, [map.to + newIdentifier]: templates[fromKey] };
      return acc;
    },
    {}
  );
  //console.log("FINAL MAPPER", tts(reduced));
  return reduced;
}

// the better "reducer". this will join templates on a key with a delimiter.
// compared to the old one, thsi one actually returns a Template.
export function joiner(
  templates: Template,
  joinOn: string,
  keyName: string,
  joinWith: string
): Template {
  // /console.log("JOINER HERE", joinOn, keyName, joinWith, tts(templates, false));
  const filteredTemplateKeys = Object.keys(templates).filter((t) => {
    const tKey = t.split(/[0-9]/)[0];
    return tKey === joinOn;
  });
  //console.log("filtered templ keys", filteredTemplateKeys);
  return {
    [keyName]: argsAndTemplateToFunction(
      [],
      filteredTemplateKeys.map((t) => templates[t]()).join(joinWith)
    ),
  };
}

// shallow copy, but still monoidal
export function filterOn(templates: Template, filterFor: string[]): Template {
  const toDelete = Object.keys(templates).filter((t) => {
    const tKey = t.split(/[0-9]/)[0];

    return !filterFor.includes(tKey);
  });
  // otherwise it'll destroy the referenced arg
  const newTemplate = cloneDeep(templates);
  toDelete.forEach((t) => delete newTemplate[t]);
  return newTemplate;
}

export function swapValuesForKeys(
  templates: Template,
  keyVals: Array<{ newValue: string; key: string }>
): Template {
  keyVals.forEach(({ key, newValue }) => {
    if (key.split("/")[1] != null) {
      throw new Error("CAN ONLY SWAP ON PURE KEYS, NOT ONES with denominators");
    }
    templates[key] = () => newValue;
  });

  return templates;
}

export function swapValuesForGenericKeysWithCb(
  templates: Template,
  keyVals: Array<{ newValue: (str: string) => string; key: string }>
): Template {
  keyVals.forEach(({ key, newValue }) => {
    if (key.split("/")[1] != null) {
      throw new Error("CAN ONLY SWAP ON PURE KEYS, NOT ONES with denominators");
    }
    const matchingKeys = Object.keys(templates).filter((tk) => {
      const keyName = getKeyName(tk);
      return keyName === key;
    });

    try {
      matchingKeys.forEach((mk) => {
        const value = newValue(templates[mk]());
        templates[mk] = () => value;
      });
    } catch (e) {
      console.log("ERROR in swapValuesForGenericKeysWithCb", e);
    }
  });

  return templates;
}
export function makeTemplateGenericAtKey(
  template: Template,
  key: string
): Template {
  const fieldKeys = getAllKeysWithNumeratorString(template, key);
  const genT = getDescendentsOfKey(fieldKeys[0], template);
  const t = getTemplatesFromKeys(genT, template);
  return cleanIndexingFromKeys(t);
}

const DEBUG_FILL_TEMPLATE_WITH_MAPPED_KEYS = false;
export function fillTemplateWithMappedKeys(
  mappings: Array<{
    inputTemplate: Template;
    fromToKeys: Array<{ from: string; to: string }>;
    index: string | number;
  }>,
  toFill: Template
): Template {
  let mappedTemplate: Template = {};
  let ontoTemplate: Template = {};
  mappings.forEach(({ template, fromToKeys, index }, i) => {
    fromToKeys.forEach(({ from, to }, i) => {
      const mapping = mapper(template, { from, to, index });
      if (DEBUG_FILL_TEMPLATE_WITH_MAPPED_KEYS)
        console.log("HERE WITH MAPPINg", tts(mapping, false));
      mappedTemplate = combine(mappedTemplate, mapping);
    });
    if (DEBUG_FILL_TEMPLATE_WITH_MAPPED_KEYS)
      console.log("WE HAVE MAPPED TEMPL", tts(mappedTemplate, false));
    const onto = applyManyToGeneric(mappedTemplate, {
      froms: fromToKeys.map((ftk) => ftk.to),
      onto: toFill,
    });
    if (DEBUG_FILL_TEMPLATE_WITH_MAPPED_KEYS)
      console.log("HERE WITH ONTO", tts(onto, false));
    if (DEBUG_FILL_TEMPLATE_WITH_MAPPED_KEYS)
      console.log("ONTO TEMPL", tts(ontoTemplate, false));
    ontoTemplate = combine(ontoTemplate, onto);
  });

  const result = multiply(mappedTemplate, ontoTemplate);
  console.log("HERE WITH RESULT", tts(result, false));
  return result;
}

export function replaceWithAllIsomorphic(
  template: Template,
  replacers: Template[]
): Template {
  let result = template;
  replacers.forEach((replacer) => {
    result = replaceWithIsomorphic(result, replacer);
  });
  return result;
}
// why isomorphic? if the "holes" are given the same name,
// we just need to transfer the keys from one to the other.
export function replaceWithIsomorphic(
  template: Template,
  replacer: Template
): Template {
  // what we're trying to do here is take template, find A, and then transfer the exact same keys from template's A to B.
  // A itself will have generic keys. B will, too. so we gotta change that. we're using findMatchingKeysForGenericTemplate, and it's
  // going to find the keys in template to use. From there, we just need to use those keys in B instead of the generic ones.
  // the upshot is that we should be able to do all this while preserving the structure in template.
  // the downshot is I'm tired, cya next time.

  // we need to find all templates that match A. we then supply B the keys found, which will have indices.
  const matchingKeys = findMatchingKeysForGenericTemplate(replacer, template);
  //console.log("matching keys", matchingKeys);

  matchingKeys.forEach((mk) => {
    delete template[mk];
    const denoms = mk.split("/")[1]?.split(",") ?? [];
    const generic = makeKeyGeneric(mk);
    const genericDenoms = generic.split("/")[1]?.split(",") ?? [];
    // what if there's more than one?

    const replacerFuncStr = replacer[generic].toString();
    // this captures some extra backticks, ensure it's removed.
    //console.log("Before", replacerFuncStr);
    // shit it's gonna split things big time.....if there's another =>
    let replacerFuncLit = replacerFuncStr.substring(
      replacerFuncStr.indexOf("=>") + 2
    );
    //console.log("pre", replacerFuncLit);
    replacerFuncLit = replacerFuncLit.substring(1, replacerFuncLit.length - 1);

    //console.log("replacerFuncLit", replacerFuncLit);
    const rsStringsGeneric = genericDenoms.map((d) => rs(d));
    rsStringsGeneric.forEach((rsg, i) => {
      const newDenomRs = rs(denoms[i]);
      //console.log("old", rsg, "new", newDenomRs);
      replacerFuncLit = replacerFuncLit.replaceAll(rsg, newDenomRs);
    });
    //console.log("REPLACED", replacerFuncLit);
    // for this part, we need to take every key/index pair from mk
    // and replace replacerCopy's key with the key/index pair.
    const newFunc = argsAndTemplateToFunction(denoms, replacerFuncLit);
    //console.log("NEW FUNC", newFunc.toString());
    template[mk] = newFunc;
  });
  return template;
}

export function replaceAllAWithB(
  template: Template,
  a: Template,
  b: Template
): Template {
  const scopeTemplate = {
    scope: () => `\n`,
  };
  const { result } = recursiveFold(template, [a], [], scopeTemplate, "  ", 12);
  console.log("the fold", tts(result, false));
  const toB = applyManyToGeneric(result, {
    froms: flatten(Object.keys(a).map((k) => k.split("/")[1]?.split(","))),
    onto: b,
  });
  console.log("replaceAllWith?", tts(toB, false));
  const multi = multiply(result, toB);
  console.log("multid", tts(multi));
  return multi;
}

export function performIfHasTemplates(
  on: Template,
  templates: Template[],
  cb: (t: Template) => Template
): Template {
  let of = orderedFold(on, templates, { mode: FoldMode.AllOrNothing });
  if (of == null) {
    return on;
  } else {
    return cb({ ...of.result, ...of.divisors });
  }
}

export function performIfNotHasTemplates(
  on: Template,
  templates: Template[],
  cb: (t: Template) => Template
): Template {
  let of = orderedFold(on, templates, { mode: FoldMode.AllOrNothing });
  if (of == null) {
    return cb(on);
  } else {
    return on;
  }
}

export function applyAtDuplicate(
  rootKey: string,
  template: Template,
  cb: (t: Template) => Template
): Template {
  const keys = Object.keys(template);
  let result: Template = {};
  keys.forEach((k) => {
    let duplicate: Template = {};
    const normalKey = getKeyName(k);
    if (normalKey === rootKey) {
      const childKeys = getDescendentsOfKey(k, template).concat(k);
      const filteredTemplates: Template = {};
      childKeys.forEach((ck) => {
        filteredTemplates[ck] = template[ck];
      });
      const duplicate: Template = applyToIndex(filteredTemplates, "0d");
      /*
      console.log(
        "created duplicate",
        tts(duplicate, false),
        "VS",
        tts(filteredTemplates, false)
      );*/
      // change key names to reflect the new dupe key
      const cbResult = cb(duplicate);
      //console.log("CBRESULT", tts(cbResult, false));

      result = { ...result, ...cbResult };
    } else {
      result[k] = template[k];
    }
  });
  // console.log("WHAT IS RESULT?", tts({ ...template, ...result }, false));
  return { ...template, ...result };
}

export function identity(t: Template): Template {
  return t;
}

// alternative name: isolateCallbackToKey
export function performOnNodes(
  rootKey: string,
  templates: Template,
  cb: (t: Template, index: number) => Template,
): Template {
  const keys = Object.keys(templates);
  let result: Template = {}; // must include all prior!!
  let index = 0;
  keys.forEach((k) => {
    console.log("AND", k)
    let operatedOnTemplate = { ...result };
    const normalKey = k.split(/[0-9]/)[0]; // or whatever we call strip
    if (normalKey === rootKey) {
      index++;
      // . . .
      console.log("it's here as index", index)
      const childKeys = getDescendentsOfKey(k, templates, true);
      console.log("CHILDKEYS", childKeys, k);
      const filteredTemplates: Template = {};
      childKeys.forEach((ck) => {
        filteredTemplates[ck] = templates[ck];
      });
      console.log("FILTERED OUT KEYS", childKeys);
      childKeys.forEach((fok) => {
        delete operatedOnTemplate[fok];
      });
      console.log("_____________________________________");
      if(index>13)
      console.log("FILTERED TEMPL", tts(filteredTemplates,false))
      const cbResult = cb(filteredTemplates, index);
      //console.log("HERE WITH CBRULEST", tts(cbResult,false));

      result = { ...operatedOnTemplate, ...cbResult }; //mergeResult(cbResult, result);
      //     console.log("MERGERESULT", result);
      // BUT!! what if cbResult keys conflict? do we need to
      // rework the key names??
      // this is why it might be better to findPairs, do generic work,
      // and then applyTemplatesToGeneric.
      // thing is, that's monoidally destructive. we need to re-work
      // this into the original set of keys.
      // we must apply a new key name to all keys in cbResult.
      // but..we must also have the original key match from the original op.
    } else {
      result[k] = templates[k];
    }
  });
  console.log("FIN OF PON");
  return result;
}

// probably not even monoidal. not reversible? not associative?
// might be though, should check some day.
export function applyToSkeleton(
  t: Template,
  skeleton: Template,
  mappings: Array<{ key: string; toKey: string }>,
  delimiter: string = ""
): Template {
  let joinedTemplate: Template = {};
  mappings.forEach((mapping) => {
    const { key, toKey } = mapping;
    // might not need, test without first
    const ct = collapseTemplateAtKey(t, key);
    if (ct == null) throw new Error("collapse is null");
    const joined = joiner(ct, key, toKey, delimiter);
    //console.log("joined", tts(joined, false));
    joinedTemplate = { ...joinedTemplate, ...multiply(joinedTemplate, joined) };
  });

  //console.log("FINAL JOINEd", tts(joinedTemplate, false));
  //console.log("SKELEOTN", tts(skeleton, false))
  return multiply(joinedTemplate, skeleton);
}

export function collapseTemplateAtKey(
  template: Template,
  key: string
): Template {
  const keys = Object.keys(template);
  //console.log("KEYS", keys, "KEY", key);
  const tCopy = cloneDeep(template);
  let result: Template = {};
  keys.forEach((k) => {
    const normalKey = getKeyName(k);
    //console.log("NORMAL", normalKey, key);
    if (normalKey === key) {
      //console.log("YUP", tCopy[k]);
      result = { ...result, [k]: tCopy[k] };
      //console.log("RESULT, ", result);
      delete tCopy[k];
    }
  });
  //console.log("PRE", tts(result, false), tts(tCopy, false));
  //console.log("RESULT", tts(multiply(result, tCopy), false));
  // so it's still being multiplied by file. we need to remove it
  // to do so, we need to remove all keys with "keys" in the denom
  const keysToRemove = Object.keys(tCopy).filter((k) =>
    k.split("/")[1]?.includes(key)
  );
  //console.log("LAKSJDFLKASJDFLKASJDFLKAJSDFLKJ", keysToRemove)
  keysToRemove.forEach((k) => delete tCopy[k]);
  //console.log("TCIPY", tts(tCopy, false), "RESULT", tts(result, false), "raw", result);
  if (isEmpty(result)) throw new Error("collapseTemplateAtKey is empty");
  return multiply(result, tCopy);
}

// value must be complete, no denoms
export function joinOnValue(
  valueToFindAB: string,
  keyToFindGenericA: string,
  siblingKeyGenericA: string,
  cbTransformValue: (t: Template) => Template,
  keyToFillB: string,
  template: Template
): Template {
  const keys = Object.keys(template);
  let foundAFlag = false;
  let foundB: Template = {};

  let transformedTemplate: Template = {};
  keys.forEach((k) => {
    if (k.indexOf("/") > 0) return;
    const normalizedKey = getKeyName(k);
    // find A, must be unique
    const aValue = template[k]();
    if (normalizedKey === keyToFindGenericA && aValue === valueToFindAB) {
      if (foundAFlag) {
        throw new Error(
          `Found more than one A with key ${keyToFindGenericA}, must have a unique template A`
        );
      }
      const templValue = template[k]();
      //console.log("TEMPL VALUE", templValue, "vs", valueToFindAB);
      if (templValue === valueToFindAB) {
        const siblingValue = getSiblingValue(template, k, siblingKeyGenericA);
        //console.log("SIBLING VALUE", siblingValue);
        const templateWithSiblingValue = {
          [siblingKeyGenericA]: () => siblingValue,
        };
        //console.log("YEAHSIBLIG", tts(templateWithSiblingValue, false));
        transformedTemplate = cbTransformValue(templateWithSiblingValue);
      }
      foundAFlag = true;
    }
    // find B, can be many
    if (normalizedKey === keyToFillB) {
      const value = template[k]();
      if (value === valueToFindAB) {
        foundB = { ...foundB, [k]: template[k] };
      }
    }
  });

  const transformedTemplateValue =
    transformedTemplate[Object.keys(transformedTemplate)[0]]();
  let finalB = {};
  Object.keys(foundB).forEach((k) => {
    finalB = {
      ...finalB,
      ...swapValuesForKeys(foundB, [
        { key: k, newValue: transformedTemplateValue },
      ]),
    };
  });
console.log("returning...")
  return { ...template, ...finalB };
}
